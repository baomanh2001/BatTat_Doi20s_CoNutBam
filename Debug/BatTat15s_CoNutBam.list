
BatTat15s_CoNutBam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002624  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002730  08002730  00012730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002754  08002754  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002754  08002754  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002754  08002754  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002754  08002754  00012754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002758  08002758  00012758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800275c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000010  0800276c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  0800276c  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007e8f  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015e9  00000000  00000000  00027f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000958  00000000  00000000  000294f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000738  00000000  00000000  00029e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001671c  00000000  00000000  0002a588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009cb2  00000000  00000000  00040ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008463b  00000000  00000000  0004a956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002670  00000000  00000000  000cef94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d1604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002718 	.word	0x08002718

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002718 	.word	0x08002718

0800014c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (htim == &htim2){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4a0c      	ldr	r2, [pc, #48]	; (8000188 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000158:	4293      	cmp	r3, r2
 800015a:	d106      	bne.n	800016a <HAL_TIM_PeriodElapsedCallback+0x1e>
		countSecond += 1;
 800015c:	4b0b      	ldr	r3, [pc, #44]	; (800018c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800015e:	781b      	ldrb	r3, [r3, #0]
 8000160:	3301      	adds	r3, #1
 8000162:	b2da      	uxtb	r2, r3
 8000164:	4b09      	ldr	r3, [pc, #36]	; (800018c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000166:	701a      	strb	r2, [r3, #0]
	}
	else if (htim == &htim3){
		countMili += 1;
//	HAL_GPIO_TogglePin(Switch4_GPIO_Port, Switch4_Pin);
	}
}
 8000168:	e009      	b.n	800017e <HAL_TIM_PeriodElapsedCallback+0x32>
	else if (htim == &htim3){
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	4a08      	ldr	r2, [pc, #32]	; (8000190 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800016e:	4293      	cmp	r3, r2
 8000170:	d105      	bne.n	800017e <HAL_TIM_PeriodElapsedCallback+0x32>
		countMili += 1;
 8000172:	4b08      	ldr	r3, [pc, #32]	; (8000194 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000174:	781b      	ldrb	r3, [r3, #0]
 8000176:	3301      	adds	r3, #1
 8000178:	b2da      	uxtb	r2, r3
 800017a:	4b06      	ldr	r3, [pc, #24]	; (8000194 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800017c:	701a      	strb	r2, [r3, #0]
}
 800017e:	bf00      	nop
 8000180:	370c      	adds	r7, #12
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	2000002c 	.word	0x2000002c
 800018c:	200000bc 	.word	0x200000bc
 8000190:	20000074 	.word	0x20000074
 8000194:	200000bd 	.word	0x200000bd

08000198 <RstAll>:
void RstAll() {
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	countSecond = 0;
 800019c:	4b3f      	ldr	r3, [pc, #252]	; (800029c <RstAll+0x104>)
 800019e:	2200      	movs	r2, #0
 80001a0:	701a      	strb	r2, [r3, #0]
	countMili = 0;
 80001a2:	4b3f      	ldr	r3, [pc, #252]	; (80002a0 <RstAll+0x108>)
 80001a4:	2200      	movs	r2, #0
 80001a6:	701a      	strb	r2, [r3, #0]
	relay1 = 0;
 80001a8:	4b3e      	ldr	r3, [pc, #248]	; (80002a4 <RstAll+0x10c>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	701a      	strb	r2, [r3, #0]
	relay2 = 0;
 80001ae:	4b3e      	ldr	r3, [pc, #248]	; (80002a8 <RstAll+0x110>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	701a      	strb	r2, [r3, #0]
	relay3 = 0;
 80001b4:	4b3d      	ldr	r3, [pc, #244]	; (80002ac <RstAll+0x114>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(Switch1_GPIO_Port, Switch1_Pin, 0);
 80001ba:	2200      	movs	r2, #0
 80001bc:	2101      	movs	r1, #1
 80001be:	483c      	ldr	r0, [pc, #240]	; (80002b0 <RstAll+0x118>)
 80001c0:	f001 fa44 	bl	800164c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Switch2_GPIO_Port, Switch2_Pin, 0);
 80001c4:	2200      	movs	r2, #0
 80001c6:	2102      	movs	r1, #2
 80001c8:	4839      	ldr	r0, [pc, #228]	; (80002b0 <RstAll+0x118>)
 80001ca:	f001 fa3f 	bl	800164c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Switch3_GPIO_Port, Switch3_Pin, 0);
 80001ce:	2200      	movs	r2, #0
 80001d0:	2104      	movs	r1, #4
 80001d2:	4837      	ldr	r0, [pc, #220]	; (80002b0 <RstAll+0x118>)
 80001d4:	f001 fa3a 	bl	800164c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Switch4_GPIO_Port, Switch4_Pin, 0);
 80001d8:	2200      	movs	r2, #0
 80001da:	2108      	movs	r1, #8
 80001dc:	4834      	ldr	r0, [pc, #208]	; (80002b0 <RstAll+0x118>)
 80001de:	f001 fa35 	bl	800164c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Switch5_GPIO_Port, Switch5_Pin, 0);
 80001e2:	2200      	movs	r2, #0
 80001e4:	2110      	movs	r1, #16
 80001e6:	4832      	ldr	r0, [pc, #200]	; (80002b0 <RstAll+0x118>)
 80001e8:	f001 fa30 	bl	800164c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Switch6_GPIO_Port, Switch6_Pin, 0);
 80001ec:	2200      	movs	r2, #0
 80001ee:	2120      	movs	r1, #32
 80001f0:	482f      	ldr	r0, [pc, #188]	; (80002b0 <RstAll+0x118>)
 80001f2:	f001 fa2b 	bl	800164c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Switch7_GPIO_Port, Switch7_Pin, 0);
 80001f6:	2200      	movs	r2, #0
 80001f8:	2140      	movs	r1, #64	; 0x40
 80001fa:	482d      	ldr	r0, [pc, #180]	; (80002b0 <RstAll+0x118>)
 80001fc:	f001 fa26 	bl	800164c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Switch8_GPIO_Port, Switch8_Pin, 0);
 8000200:	2200      	movs	r2, #0
 8000202:	2180      	movs	r1, #128	; 0x80
 8000204:	482a      	ldr	r0, [pc, #168]	; (80002b0 <RstAll+0x118>)
 8000206:	f001 fa21 	bl	800164c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, 0);
 800020a:	2200      	movs	r2, #0
 800020c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000210:	4828      	ldr	r0, [pc, #160]	; (80002b4 <RstAll+0x11c>)
 8000212:	f001 fa1b 	bl	800164c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, 0);
 8000216:	2200      	movs	r2, #0
 8000218:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800021c:	4825      	ldr	r0, [pc, #148]	; (80002b4 <RstAll+0x11c>)
 800021e:	f001 fa15 	bl	800164c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, 0);
 8000222:	2200      	movs	r2, #0
 8000224:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000228:	4822      	ldr	r0, [pc, #136]	; (80002b4 <RstAll+0x11c>)
 800022a:	f001 fa0f 	bl	800164c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led4_GPIO_Port, Led4_Pin, 0);
 800022e:	2200      	movs	r2, #0
 8000230:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000234:	481f      	ldr	r0, [pc, #124]	; (80002b4 <RstAll+0x11c>)
 8000236:	f001 fa09 	bl	800164c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led5_GPIO_Port, Led5_Pin, 0);
 800023a:	2200      	movs	r2, #0
 800023c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000240:	481b      	ldr	r0, [pc, #108]	; (80002b0 <RstAll+0x118>)
 8000242:	f001 fa03 	bl	800164c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led6_GPIO_Port, Led6_Pin, 0);
 8000246:	2200      	movs	r2, #0
 8000248:	f44f 7100 	mov.w	r1, #512	; 0x200
 800024c:	4818      	ldr	r0, [pc, #96]	; (80002b0 <RstAll+0x118>)
 800024e:	f001 f9fd 	bl	800164c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led7_GPIO_Port, Led7_Pin, 0);
 8000252:	2200      	movs	r2, #0
 8000254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000258:	4815      	ldr	r0, [pc, #84]	; (80002b0 <RstAll+0x118>)
 800025a:	f001 f9f7 	bl	800164c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led8_GPIO_Port, Led8_Pin, 0);
 800025e:	2200      	movs	r2, #0
 8000260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000264:	4812      	ldr	r0, [pc, #72]	; (80002b0 <RstAll+0x118>)
 8000266:	f001 f9f1 	bl	800164c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led9_GPIO_Port, Led9_Pin, 0);
 800026a:	2200      	movs	r2, #0
 800026c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000270:	480f      	ldr	r0, [pc, #60]	; (80002b0 <RstAll+0x118>)
 8000272:	f001 f9eb 	bl	800164c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led10_GPIO_Port, Led10_Pin, 0);
 8000276:	2200      	movs	r2, #0
 8000278:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800027c:	480c      	ldr	r0, [pc, #48]	; (80002b0 <RstAll+0x118>)
 800027e:	f001 f9e5 	bl	800164c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led11_GPIO_Port, Led11_Pin, 0);
 8000282:	2200      	movs	r2, #0
 8000284:	2108      	movs	r1, #8
 8000286:	480b      	ldr	r0, [pc, #44]	; (80002b4 <RstAll+0x11c>)
 8000288:	f001 f9e0 	bl	800164c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led12_GPIO_Port, Led12_Pin, 0);
 800028c:	2200      	movs	r2, #0
 800028e:	2110      	movs	r1, #16
 8000290:	4808      	ldr	r0, [pc, #32]	; (80002b4 <RstAll+0x11c>)
 8000292:	f001 f9db 	bl	800164c <HAL_GPIO_WritePin>

}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	200000bc 	.word	0x200000bc
 80002a0:	200000bd 	.word	0x200000bd
 80002a4:	200000bf 	.word	0x200000bf
 80002a8:	200000c0 	.word	0x200000c0
 80002ac:	200000c1 	.word	0x200000c1
 80002b0:	40010800 	.word	0x40010800
 80002b4:	40010c00 	.word	0x40010c00

080002b8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == StartButt_Pin) {
 80002c2:	88fb      	ldrh	r3, [r7, #6]
 80002c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002c8:	d10e      	bne.n	80002e8 <HAL_GPIO_EXTI_Callback+0x30>
		flagChange = 1;
 80002ca:	4b13      	ldr	r3, [pc, #76]	; (8000318 <HAL_GPIO_EXTI_Callback+0x60>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	701a      	strb	r2, [r3, #0]
		state = switch1;
 80002d0:	4b12      	ldr	r3, [pc, #72]	; (800031c <HAL_GPIO_EXTI_Callback+0x64>)
 80002d2:	2201      	movs	r2, #1
 80002d4:	701a      	strb	r2, [r3, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(StartButt_Pin);
 80002d6:	4b12      	ldr	r3, [pc, #72]	; (8000320 <HAL_GPIO_EXTI_Callback+0x68>)
 80002d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002dc:	615a      	str	r2, [r3, #20]
		EXTI->PR = StartButt_Pin;
 80002de:	4b10      	ldr	r3, [pc, #64]	; (8000320 <HAL_GPIO_EXTI_Callback+0x68>)
 80002e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002e4:	615a      	str	r2, [r3, #20]
	}
//	HAL_Delay(10);
//	if (GPIO_Pin == SkipButt_Pin) {
//		flagSkip = 1;
//	}
}
 80002e6:	e011      	b.n	800030c <HAL_GPIO_EXTI_Callback+0x54>
	else if (GPIO_Pin == StopButt_Pin) {
 80002e8:	88fb      	ldrh	r3, [r7, #6]
 80002ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80002ee:	d10d      	bne.n	800030c <HAL_GPIO_EXTI_Callback+0x54>
		flagChange = 1;
 80002f0:	4b09      	ldr	r3, [pc, #36]	; (8000318 <HAL_GPIO_EXTI_Callback+0x60>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	701a      	strb	r2, [r3, #0]
		state = stop;
 80002f6:	4b09      	ldr	r3, [pc, #36]	; (800031c <HAL_GPIO_EXTI_Callback+0x64>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	701a      	strb	r2, [r3, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(StopButt_Pin);
 80002fc:	4b08      	ldr	r3, [pc, #32]	; (8000320 <HAL_GPIO_EXTI_Callback+0x68>)
 80002fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000302:	615a      	str	r2, [r3, #20]
		EXTI->PR = StopButt_Pin;
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <HAL_GPIO_EXTI_Callback+0x68>)
 8000306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800030a:	615a      	str	r2, [r3, #20]
}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	200000be 	.word	0x200000be
 800031c:	200000c2 	.word	0x200000c2
 8000320:	40010400 	.word	0x40010400

08000324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000328:	f000 fe9c 	bl	8001064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800032c:	f000 fc4e 	bl	8000bcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000330:	f000 fd24 	bl	8000d7c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000334:	f000 fc86 	bl	8000c44 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000338:	f000 fcd2 	bl	8000ce0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	RstAll();
 800033c:	f7ff ff2c 	bl	8000198 <RstAll>
//					if(countSecond  >= 5){
////						HAL_GPIO_WritePin(Switch4_GPIO_Port, Switch4_Pin, 0);
////					HAL_GPIO_TogglePin(Switch6_GPIO_Port, Switch6_Pin);
//					countSecond = 0;
//					}
		switch (state) {
 8000340:	4ba2      	ldr	r3, [pc, #648]	; (80005cc <main+0x2a8>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	2b0c      	cmp	r3, #12
 8000346:	d8fb      	bhi.n	8000340 <main+0x1c>
 8000348:	a201      	add	r2, pc, #4	; (adr r2, 8000350 <main+0x2c>)
 800034a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800034e:	bf00      	nop
 8000350:	08000385 	.word	0x08000385
 8000354:	080003a7 	.word	0x080003a7
 8000358:	0800044d 	.word	0x0800044d
 800035c:	080004ef 	.word	0x080004ef
 8000360:	08000591 	.word	0x08000591
 8000364:	0800065b 	.word	0x0800065b
 8000368:	080006f1 	.word	0x080006f1
 800036c:	08000787 	.word	0x08000787
 8000370:	0800081d 	.word	0x0800081d
 8000374:	080008d7 	.word	0x080008d7
 8000378:	0800096d 	.word	0x0800096d
 800037c:	08000a03 	.word	0x08000a03
 8000380:	08000a9b 	.word	0x08000a9b
		case stop:
			if (flagChange) {
 8000384:	4b92      	ldr	r3, [pc, #584]	; (80005d0 <main+0x2ac>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	f000 83e6 	beq.w	8000b5a <main+0x836>
				HAL_TIM_Base_Stop_IT(&htim3);
 800038e:	4891      	ldr	r0, [pc, #580]	; (80005d4 <main+0x2b0>)
 8000390:	f001 fe0c 	bl	8001fac <HAL_TIM_Base_Stop_IT>
				HAL_TIM_Base_Stop_IT(&htim2);
 8000394:	4890      	ldr	r0, [pc, #576]	; (80005d8 <main+0x2b4>)
 8000396:	f001 fe09 	bl	8001fac <HAL_TIM_Base_Stop_IT>
				RstAll();
 800039a:	f7ff fefd 	bl	8000198 <RstAll>
				flagChange = 0;
 800039e:	4b8c      	ldr	r3, [pc, #560]	; (80005d0 <main+0x2ac>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	701a      	strb	r2, [r3, #0]
			}
			break;
 80003a4:	e3d9      	b.n	8000b5a <main+0x836>
		case switch1:
			if (flagChange) {
 80003a6:	4b8a      	ldr	r3, [pc, #552]	; (80005d0 <main+0x2ac>)
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d01e      	beq.n	80003ec <main+0xc8>
				countMili = 0;
 80003ae:	4b8b      	ldr	r3, [pc, #556]	; (80005dc <main+0x2b8>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	701a      	strb	r2, [r3, #0]
				RstAll();
 80003b4:	f7ff fef0 	bl	8000198 <RstAll>
				HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, 1);
 80003b8:	2201      	movs	r2, #1
 80003ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003be:	4888      	ldr	r0, [pc, #544]	; (80005e0 <main+0x2bc>)
 80003c0:	f001 f944 	bl	800164c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch1_GPIO_Port, Switch1_Pin, 1);
 80003c4:	2201      	movs	r2, #1
 80003c6:	2101      	movs	r1, #1
 80003c8:	4886      	ldr	r0, [pc, #536]	; (80005e4 <main+0x2c0>)
 80003ca:	f001 f93f 	bl	800164c <HAL_GPIO_WritePin>
				relay1 = 1;
 80003ce:	4b86      	ldr	r3, [pc, #536]	; (80005e8 <main+0x2c4>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 80003d4:	4b7f      	ldr	r3, [pc, #508]	; (80005d4 <main+0x2b0>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	f06f 0201 	mvn.w	r2, #1
 80003dc:	611a      	str	r2, [r3, #16]
				HAL_TIM_Base_Start_IT(&htim3);
 80003de:	487d      	ldr	r0, [pc, #500]	; (80005d4 <main+0x2b0>)
 80003e0:	f001 fd92 	bl	8001f08 <HAL_TIM_Base_Start_IT>
				flagChange = 0;
 80003e4:	4b7a      	ldr	r3, [pc, #488]	; (80005d0 <main+0x2ac>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	701a      	strb	r2, [r3, #0]
					countSecond = 0;
					HAL_TIM_Base_Stop_IT(&htim2);

				}
			}
			break;
 80003ea:	e3b9      	b.n	8000b60 <main+0x83c>
				if (countMili >= countMili_limit) {
 80003ec:	4b7b      	ldr	r3, [pc, #492]	; (80005dc <main+0x2b8>)
 80003ee:	781a      	ldrb	r2, [r3, #0]
 80003f0:	4b7e      	ldr	r3, [pc, #504]	; (80005ec <main+0x2c8>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	429a      	cmp	r2, r3
 80003f6:	d315      	bcc.n	8000424 <main+0x100>
					relay1 = 0;
 80003f8:	4b7b      	ldr	r3, [pc, #492]	; (80005e8 <main+0x2c4>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(Switch1_GPIO_Port, Switch1_Pin, 0);
 80003fe:	2200      	movs	r2, #0
 8000400:	2101      	movs	r1, #1
 8000402:	4878      	ldr	r0, [pc, #480]	; (80005e4 <main+0x2c0>)
 8000404:	f001 f922 	bl	800164c <HAL_GPIO_WritePin>
					HAL_TIM_Base_Stop_IT(&htim3);
 8000408:	4872      	ldr	r0, [pc, #456]	; (80005d4 <main+0x2b0>)
 800040a:	f001 fdcf 	bl	8001fac <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 800040e:	4b72      	ldr	r3, [pc, #456]	; (80005d8 <main+0x2b4>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f06f 0201 	mvn.w	r2, #1
 8000416:	611a      	str	r2, [r3, #16]
					HAL_TIM_Base_Start_IT(&htim2);
 8000418:	486f      	ldr	r0, [pc, #444]	; (80005d8 <main+0x2b4>)
 800041a:	f001 fd75 	bl	8001f08 <HAL_TIM_Base_Start_IT>
					countMili = 0;
 800041e:	4b6f      	ldr	r3, [pc, #444]	; (80005dc <main+0x2b8>)
 8000420:	2200      	movs	r2, #0
 8000422:	701a      	strb	r2, [r3, #0]
				if (countSecond >= countSecond_limit) {
 8000424:	4b72      	ldr	r3, [pc, #456]	; (80005f0 <main+0x2cc>)
 8000426:	781a      	ldrb	r2, [r3, #0]
 8000428:	4b72      	ldr	r3, [pc, #456]	; (80005f4 <main+0x2d0>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	429a      	cmp	r2, r3
 800042e:	f0c0 8397 	bcc.w	8000b60 <main+0x83c>
					state = switch2;
 8000432:	4b66      	ldr	r3, [pc, #408]	; (80005cc <main+0x2a8>)
 8000434:	2202      	movs	r2, #2
 8000436:	701a      	strb	r2, [r3, #0]
					flagChange = 1;
 8000438:	4b65      	ldr	r3, [pc, #404]	; (80005d0 <main+0x2ac>)
 800043a:	2201      	movs	r2, #1
 800043c:	701a      	strb	r2, [r3, #0]
					countSecond = 0;
 800043e:	4b6c      	ldr	r3, [pc, #432]	; (80005f0 <main+0x2cc>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim2);
 8000444:	4864      	ldr	r0, [pc, #400]	; (80005d8 <main+0x2b4>)
 8000446:	f001 fdb1 	bl	8001fac <HAL_TIM_Base_Stop_IT>
			break;
 800044a:	e389      	b.n	8000b60 <main+0x83c>

		case switch2:
			if (flagChange) {
 800044c:	4b60      	ldr	r3, [pc, #384]	; (80005d0 <main+0x2ac>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d01c      	beq.n	800048e <main+0x16a>
				countMili = 0;
 8000454:	4b61      	ldr	r3, [pc, #388]	; (80005dc <main+0x2b8>)
 8000456:	2200      	movs	r2, #0
 8000458:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, 1);
 800045a:	2201      	movs	r2, #1
 800045c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000460:	485f      	ldr	r0, [pc, #380]	; (80005e0 <main+0x2bc>)
 8000462:	f001 f8f3 	bl	800164c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch2_GPIO_Port, Switch2_Pin, 1);
 8000466:	2201      	movs	r2, #1
 8000468:	2102      	movs	r1, #2
 800046a:	485e      	ldr	r0, [pc, #376]	; (80005e4 <main+0x2c0>)
 800046c:	f001 f8ee 	bl	800164c <HAL_GPIO_WritePin>
				relay2 = 1;
 8000470:	4b61      	ldr	r3, [pc, #388]	; (80005f8 <main+0x2d4>)
 8000472:	2201      	movs	r2, #1
 8000474:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8000476:	4b57      	ldr	r3, [pc, #348]	; (80005d4 <main+0x2b0>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f06f 0201 	mvn.w	r2, #1
 800047e:	611a      	str	r2, [r3, #16]
				HAL_TIM_Base_Start_IT(&htim3);
 8000480:	4854      	ldr	r0, [pc, #336]	; (80005d4 <main+0x2b0>)
 8000482:	f001 fd41 	bl	8001f08 <HAL_TIM_Base_Start_IT>
				flagChange = 0;
 8000486:	4b52      	ldr	r3, [pc, #328]	; (80005d0 <main+0x2ac>)
 8000488:	2200      	movs	r2, #0
 800048a:	701a      	strb	r2, [r3, #0]
					countSecond = 0;
					HAL_TIM_Base_Stop_IT(&htim2);

				}
			}
			break;
 800048c:	e36b      	b.n	8000b66 <main+0x842>
				if (countMili >= countMili_limit) {
 800048e:	4b53      	ldr	r3, [pc, #332]	; (80005dc <main+0x2b8>)
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	4b56      	ldr	r3, [pc, #344]	; (80005ec <main+0x2c8>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	429a      	cmp	r2, r3
 8000498:	d315      	bcc.n	80004c6 <main+0x1a2>
					HAL_GPIO_WritePin(Switch2_GPIO_Port, Switch2_Pin, 0);
 800049a:	2200      	movs	r2, #0
 800049c:	2102      	movs	r1, #2
 800049e:	4851      	ldr	r0, [pc, #324]	; (80005e4 <main+0x2c0>)
 80004a0:	f001 f8d4 	bl	800164c <HAL_GPIO_WritePin>
					relay2 = 0;
 80004a4:	4b54      	ldr	r3, [pc, #336]	; (80005f8 <main+0x2d4>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim3);
 80004aa:	484a      	ldr	r0, [pc, #296]	; (80005d4 <main+0x2b0>)
 80004ac:	f001 fd7e 	bl	8001fac <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 80004b0:	4b49      	ldr	r3, [pc, #292]	; (80005d8 <main+0x2b4>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	f06f 0201 	mvn.w	r2, #1
 80004b8:	611a      	str	r2, [r3, #16]
					HAL_TIM_Base_Start_IT(&htim2);
 80004ba:	4847      	ldr	r0, [pc, #284]	; (80005d8 <main+0x2b4>)
 80004bc:	f001 fd24 	bl	8001f08 <HAL_TIM_Base_Start_IT>
					countMili = 0;
 80004c0:	4b46      	ldr	r3, [pc, #280]	; (80005dc <main+0x2b8>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	701a      	strb	r2, [r3, #0]
				if (countSecond >= countSecond_limit) {
 80004c6:	4b4a      	ldr	r3, [pc, #296]	; (80005f0 <main+0x2cc>)
 80004c8:	781a      	ldrb	r2, [r3, #0]
 80004ca:	4b4a      	ldr	r3, [pc, #296]	; (80005f4 <main+0x2d0>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	429a      	cmp	r2, r3
 80004d0:	f0c0 8349 	bcc.w	8000b66 <main+0x842>
					state = switch3;
 80004d4:	4b3d      	ldr	r3, [pc, #244]	; (80005cc <main+0x2a8>)
 80004d6:	2203      	movs	r2, #3
 80004d8:	701a      	strb	r2, [r3, #0]
					flagChange = 1;
 80004da:	4b3d      	ldr	r3, [pc, #244]	; (80005d0 <main+0x2ac>)
 80004dc:	2201      	movs	r2, #1
 80004de:	701a      	strb	r2, [r3, #0]
					countSecond = 0;
 80004e0:	4b43      	ldr	r3, [pc, #268]	; (80005f0 <main+0x2cc>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim2);
 80004e6:	483c      	ldr	r0, [pc, #240]	; (80005d8 <main+0x2b4>)
 80004e8:	f001 fd60 	bl	8001fac <HAL_TIM_Base_Stop_IT>
			break;
 80004ec:	e33b      	b.n	8000b66 <main+0x842>

		case switch3:
			if (flagChange) {
 80004ee:	4b38      	ldr	r3, [pc, #224]	; (80005d0 <main+0x2ac>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d01c      	beq.n	8000530 <main+0x20c>
				countMili = 0;
 80004f6:	4b39      	ldr	r3, [pc, #228]	; (80005dc <main+0x2b8>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, 1);
 80004fc:	2201      	movs	r2, #1
 80004fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000502:	4837      	ldr	r0, [pc, #220]	; (80005e0 <main+0x2bc>)
 8000504:	f001 f8a2 	bl	800164c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch3_GPIO_Port, Switch3_Pin, 1);
 8000508:	2201      	movs	r2, #1
 800050a:	2104      	movs	r1, #4
 800050c:	4835      	ldr	r0, [pc, #212]	; (80005e4 <main+0x2c0>)
 800050e:	f001 f89d 	bl	800164c <HAL_GPIO_WritePin>
				relay3 = 1;
 8000512:	4b3a      	ldr	r3, [pc, #232]	; (80005fc <main+0x2d8>)
 8000514:	2201      	movs	r2, #1
 8000516:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8000518:	4b2e      	ldr	r3, [pc, #184]	; (80005d4 <main+0x2b0>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f06f 0201 	mvn.w	r2, #1
 8000520:	611a      	str	r2, [r3, #16]
				HAL_TIM_Base_Start_IT(&htim3);
 8000522:	482c      	ldr	r0, [pc, #176]	; (80005d4 <main+0x2b0>)
 8000524:	f001 fcf0 	bl	8001f08 <HAL_TIM_Base_Start_IT>
				flagChange = 0;
 8000528:	4b29      	ldr	r3, [pc, #164]	; (80005d0 <main+0x2ac>)
 800052a:	2200      	movs	r2, #0
 800052c:	701a      	strb	r2, [r3, #0]
					countSecond = 0;
					HAL_TIM_Base_Stop_IT(&htim2);

				}
			}
			break;
 800052e:	e31d      	b.n	8000b6c <main+0x848>
				if (countMili >= countMili_limit) {
 8000530:	4b2a      	ldr	r3, [pc, #168]	; (80005dc <main+0x2b8>)
 8000532:	781a      	ldrb	r2, [r3, #0]
 8000534:	4b2d      	ldr	r3, [pc, #180]	; (80005ec <main+0x2c8>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	429a      	cmp	r2, r3
 800053a:	d315      	bcc.n	8000568 <main+0x244>
					HAL_GPIO_WritePin(Switch3_GPIO_Port, Switch3_Pin, 0);
 800053c:	2200      	movs	r2, #0
 800053e:	2104      	movs	r1, #4
 8000540:	4828      	ldr	r0, [pc, #160]	; (80005e4 <main+0x2c0>)
 8000542:	f001 f883 	bl	800164c <HAL_GPIO_WritePin>
					relay3 = 0;
 8000546:	4b2d      	ldr	r3, [pc, #180]	; (80005fc <main+0x2d8>)
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim3);
 800054c:	4821      	ldr	r0, [pc, #132]	; (80005d4 <main+0x2b0>)
 800054e:	f001 fd2d 	bl	8001fac <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8000552:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <main+0x2b4>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f06f 0201 	mvn.w	r2, #1
 800055a:	611a      	str	r2, [r3, #16]
					HAL_TIM_Base_Start_IT(&htim2);
 800055c:	481e      	ldr	r0, [pc, #120]	; (80005d8 <main+0x2b4>)
 800055e:	f001 fcd3 	bl	8001f08 <HAL_TIM_Base_Start_IT>
					countMili = 0;
 8000562:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <main+0x2b8>)
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
				if (countSecond >= countSecond_limit) {
 8000568:	4b21      	ldr	r3, [pc, #132]	; (80005f0 <main+0x2cc>)
 800056a:	781a      	ldrb	r2, [r3, #0]
 800056c:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <main+0x2d0>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	429a      	cmp	r2, r3
 8000572:	f0c0 82fb 	bcc.w	8000b6c <main+0x848>
					state = switch4;
 8000576:	4b15      	ldr	r3, [pc, #84]	; (80005cc <main+0x2a8>)
 8000578:	2204      	movs	r2, #4
 800057a:	701a      	strb	r2, [r3, #0]
					flagChange = 1;
 800057c:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <main+0x2ac>)
 800057e:	2201      	movs	r2, #1
 8000580:	701a      	strb	r2, [r3, #0]
					countSecond = 0;
 8000582:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <main+0x2cc>)
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim2);
 8000588:	4813      	ldr	r0, [pc, #76]	; (80005d8 <main+0x2b4>)
 800058a:	f001 fd0f 	bl	8001fac <HAL_TIM_Base_Stop_IT>
			break;
 800058e:	e2ed      	b.n	8000b6c <main+0x848>

		case switch4:
			if (flagChange) {
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <main+0x2ac>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d033      	beq.n	8000600 <main+0x2dc>
				countMili = 0;
 8000598:	4b10      	ldr	r3, [pc, #64]	; (80005dc <main+0x2b8>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Led4_GPIO_Port, Led4_Pin, 1);
 800059e:	2201      	movs	r2, #1
 80005a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a4:	480e      	ldr	r0, [pc, #56]	; (80005e0 <main+0x2bc>)
 80005a6:	f001 f851 	bl	800164c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch4_GPIO_Port, Switch4_Pin, 1);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2108      	movs	r1, #8
 80005ae:	480d      	ldr	r0, [pc, #52]	; (80005e4 <main+0x2c0>)
 80005b0:	f001 f84c 	bl	800164c <HAL_GPIO_WritePin>
				__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <main+0x2b0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f06f 0201 	mvn.w	r2, #1
 80005bc:	611a      	str	r2, [r3, #16]
				HAL_TIM_Base_Start_IT(&htim3);
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <main+0x2b0>)
 80005c0:	f001 fca2 	bl	8001f08 <HAL_TIM_Base_Start_IT>
				flagChange = 0;
 80005c4:	4b02      	ldr	r3, [pc, #8]	; (80005d0 <main+0x2ac>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
					countSecond = 0;
					HAL_TIM_Base_Stop_IT(&htim2);

				}
			}
			break;
 80005ca:	e2d2      	b.n	8000b72 <main+0x84e>
 80005cc:	200000c2 	.word	0x200000c2
 80005d0:	200000be 	.word	0x200000be
 80005d4:	20000074 	.word	0x20000074
 80005d8:	2000002c 	.word	0x2000002c
 80005dc:	200000bd 	.word	0x200000bd
 80005e0:	40010c00 	.word	0x40010c00
 80005e4:	40010800 	.word	0x40010800
 80005e8:	200000bf 	.word	0x200000bf
 80005ec:	20000001 	.word	0x20000001
 80005f0:	200000bc 	.word	0x200000bc
 80005f4:	20000000 	.word	0x20000000
 80005f8:	200000c0 	.word	0x200000c0
 80005fc:	200000c1 	.word	0x200000c1
				if (countMili >= countMili_limit) {
 8000600:	4b95      	ldr	r3, [pc, #596]	; (8000858 <main+0x534>)
 8000602:	781a      	ldrb	r2, [r3, #0]
 8000604:	4b95      	ldr	r3, [pc, #596]	; (800085c <main+0x538>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	429a      	cmp	r2, r3
 800060a:	d312      	bcc.n	8000632 <main+0x30e>
					HAL_GPIO_WritePin(Switch4_GPIO_Port, Switch4_Pin, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	2108      	movs	r1, #8
 8000610:	4893      	ldr	r0, [pc, #588]	; (8000860 <main+0x53c>)
 8000612:	f001 f81b 	bl	800164c <HAL_GPIO_WritePin>
					HAL_TIM_Base_Stop_IT(&htim3);
 8000616:	4893      	ldr	r0, [pc, #588]	; (8000864 <main+0x540>)
 8000618:	f001 fcc8 	bl	8001fac <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 800061c:	4b92      	ldr	r3, [pc, #584]	; (8000868 <main+0x544>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f06f 0201 	mvn.w	r2, #1
 8000624:	611a      	str	r2, [r3, #16]
					HAL_TIM_Base_Start_IT(&htim2);
 8000626:	4890      	ldr	r0, [pc, #576]	; (8000868 <main+0x544>)
 8000628:	f001 fc6e 	bl	8001f08 <HAL_TIM_Base_Start_IT>
					countMili = 0;
 800062c:	4b8a      	ldr	r3, [pc, #552]	; (8000858 <main+0x534>)
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
				if (countSecond >= countSecond_limit) {
 8000632:	4b8e      	ldr	r3, [pc, #568]	; (800086c <main+0x548>)
 8000634:	781a      	ldrb	r2, [r3, #0]
 8000636:	4b8e      	ldr	r3, [pc, #568]	; (8000870 <main+0x54c>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	429a      	cmp	r2, r3
 800063c:	f0c0 8299 	bcc.w	8000b72 <main+0x84e>
					state = switch5;
 8000640:	4b8c      	ldr	r3, [pc, #560]	; (8000874 <main+0x550>)
 8000642:	2205      	movs	r2, #5
 8000644:	701a      	strb	r2, [r3, #0]
					flagChange = 1;
 8000646:	4b8c      	ldr	r3, [pc, #560]	; (8000878 <main+0x554>)
 8000648:	2201      	movs	r2, #1
 800064a:	701a      	strb	r2, [r3, #0]
					countSecond = 0;
 800064c:	4b87      	ldr	r3, [pc, #540]	; (800086c <main+0x548>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim2);
 8000652:	4885      	ldr	r0, [pc, #532]	; (8000868 <main+0x544>)
 8000654:	f001 fcaa 	bl	8001fac <HAL_TIM_Base_Stop_IT>
			break;
 8000658:	e28b      	b.n	8000b72 <main+0x84e>

		case switch5:
			if (flagChange) {
 800065a:	4b87      	ldr	r3, [pc, #540]	; (8000878 <main+0x554>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d019      	beq.n	8000696 <main+0x372>
				countMili = 0;
 8000662:	4b7d      	ldr	r3, [pc, #500]	; (8000858 <main+0x534>)
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Led5_GPIO_Port, Led5_Pin, 1);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066e:	487c      	ldr	r0, [pc, #496]	; (8000860 <main+0x53c>)
 8000670:	f000 ffec 	bl	800164c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch5_GPIO_Port, Switch5_Pin, 1);
 8000674:	2201      	movs	r2, #1
 8000676:	2110      	movs	r1, #16
 8000678:	4879      	ldr	r0, [pc, #484]	; (8000860 <main+0x53c>)
 800067a:	f000 ffe7 	bl	800164c <HAL_GPIO_WritePin>
				__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 800067e:	4b79      	ldr	r3, [pc, #484]	; (8000864 <main+0x540>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f06f 0201 	mvn.w	r2, #1
 8000686:	611a      	str	r2, [r3, #16]
				HAL_TIM_Base_Start_IT(&htim3);
 8000688:	4876      	ldr	r0, [pc, #472]	; (8000864 <main+0x540>)
 800068a:	f001 fc3d 	bl	8001f08 <HAL_TIM_Base_Start_IT>
				flagChange = 0;
 800068e:	4b7a      	ldr	r3, [pc, #488]	; (8000878 <main+0x554>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
					countSecond = 0;
					HAL_TIM_Base_Stop_IT(&htim2);

				}
			}
			break;
 8000694:	e270      	b.n	8000b78 <main+0x854>
				if (countMili >= countMili_limit) {
 8000696:	4b70      	ldr	r3, [pc, #448]	; (8000858 <main+0x534>)
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	4b70      	ldr	r3, [pc, #448]	; (800085c <main+0x538>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	429a      	cmp	r2, r3
 80006a0:	d312      	bcc.n	80006c8 <main+0x3a4>
					HAL_GPIO_WritePin(Switch5_GPIO_Port, Switch5_Pin, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2110      	movs	r1, #16
 80006a6:	486e      	ldr	r0, [pc, #440]	; (8000860 <main+0x53c>)
 80006a8:	f000 ffd0 	bl	800164c <HAL_GPIO_WritePin>
					HAL_TIM_Base_Stop_IT(&htim3);
 80006ac:	486d      	ldr	r0, [pc, #436]	; (8000864 <main+0x540>)
 80006ae:	f001 fc7d 	bl	8001fac <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 80006b2:	4b6d      	ldr	r3, [pc, #436]	; (8000868 <main+0x544>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f06f 0201 	mvn.w	r2, #1
 80006ba:	611a      	str	r2, [r3, #16]
					HAL_TIM_Base_Start_IT(&htim2);
 80006bc:	486a      	ldr	r0, [pc, #424]	; (8000868 <main+0x544>)
 80006be:	f001 fc23 	bl	8001f08 <HAL_TIM_Base_Start_IT>
					countMili = 0;
 80006c2:	4b65      	ldr	r3, [pc, #404]	; (8000858 <main+0x534>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
				if (countSecond >= countSecond_limit) {
 80006c8:	4b68      	ldr	r3, [pc, #416]	; (800086c <main+0x548>)
 80006ca:	781a      	ldrb	r2, [r3, #0]
 80006cc:	4b68      	ldr	r3, [pc, #416]	; (8000870 <main+0x54c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	f0c0 8251 	bcc.w	8000b78 <main+0x854>
					state = switch6;
 80006d6:	4b67      	ldr	r3, [pc, #412]	; (8000874 <main+0x550>)
 80006d8:	2206      	movs	r2, #6
 80006da:	701a      	strb	r2, [r3, #0]
					flagChange = 1;
 80006dc:	4b66      	ldr	r3, [pc, #408]	; (8000878 <main+0x554>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
					countSecond = 0;
 80006e2:	4b62      	ldr	r3, [pc, #392]	; (800086c <main+0x548>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim2);
 80006e8:	485f      	ldr	r0, [pc, #380]	; (8000868 <main+0x544>)
 80006ea:	f001 fc5f 	bl	8001fac <HAL_TIM_Base_Stop_IT>
			break;
 80006ee:	e243      	b.n	8000b78 <main+0x854>

		case switch6:
			if (flagChange) {
 80006f0:	4b61      	ldr	r3, [pc, #388]	; (8000878 <main+0x554>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d019      	beq.n	800072c <main+0x408>
				countMili = 0;
 80006f8:	4b57      	ldr	r3, [pc, #348]	; (8000858 <main+0x534>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Led6_GPIO_Port, Led6_Pin, 1);
 80006fe:	2201      	movs	r2, #1
 8000700:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000704:	4856      	ldr	r0, [pc, #344]	; (8000860 <main+0x53c>)
 8000706:	f000 ffa1 	bl	800164c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch6_GPIO_Port, Switch6_Pin, 1);
 800070a:	2201      	movs	r2, #1
 800070c:	2120      	movs	r1, #32
 800070e:	4854      	ldr	r0, [pc, #336]	; (8000860 <main+0x53c>)
 8000710:	f000 ff9c 	bl	800164c <HAL_GPIO_WritePin>
				__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8000714:	4b53      	ldr	r3, [pc, #332]	; (8000864 <main+0x540>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f06f 0201 	mvn.w	r2, #1
 800071c:	611a      	str	r2, [r3, #16]
				HAL_TIM_Base_Start_IT(&htim3);
 800071e:	4851      	ldr	r0, [pc, #324]	; (8000864 <main+0x540>)
 8000720:	f001 fbf2 	bl	8001f08 <HAL_TIM_Base_Start_IT>
				flagChange = 0;
 8000724:	4b54      	ldr	r3, [pc, #336]	; (8000878 <main+0x554>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
					countSecond = 0;
					HAL_TIM_Base_Stop_IT(&htim2);

				}
			}
			break;
 800072a:	e228      	b.n	8000b7e <main+0x85a>
				if (countMili >= countMili_limit) {
 800072c:	4b4a      	ldr	r3, [pc, #296]	; (8000858 <main+0x534>)
 800072e:	781a      	ldrb	r2, [r3, #0]
 8000730:	4b4a      	ldr	r3, [pc, #296]	; (800085c <main+0x538>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	429a      	cmp	r2, r3
 8000736:	d312      	bcc.n	800075e <main+0x43a>
					HAL_GPIO_WritePin(Switch6_GPIO_Port, Switch6_Pin, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2120      	movs	r1, #32
 800073c:	4848      	ldr	r0, [pc, #288]	; (8000860 <main+0x53c>)
 800073e:	f000 ff85 	bl	800164c <HAL_GPIO_WritePin>
					HAL_TIM_Base_Stop_IT(&htim3);
 8000742:	4848      	ldr	r0, [pc, #288]	; (8000864 <main+0x540>)
 8000744:	f001 fc32 	bl	8001fac <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8000748:	4b47      	ldr	r3, [pc, #284]	; (8000868 <main+0x544>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f06f 0201 	mvn.w	r2, #1
 8000750:	611a      	str	r2, [r3, #16]
					HAL_TIM_Base_Start_IT(&htim2);
 8000752:	4845      	ldr	r0, [pc, #276]	; (8000868 <main+0x544>)
 8000754:	f001 fbd8 	bl	8001f08 <HAL_TIM_Base_Start_IT>
					countMili = 0;
 8000758:	4b3f      	ldr	r3, [pc, #252]	; (8000858 <main+0x534>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
				if (countSecond >= countSecond_limit) {
 800075e:	4b43      	ldr	r3, [pc, #268]	; (800086c <main+0x548>)
 8000760:	781a      	ldrb	r2, [r3, #0]
 8000762:	4b43      	ldr	r3, [pc, #268]	; (8000870 <main+0x54c>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	429a      	cmp	r2, r3
 8000768:	f0c0 8209 	bcc.w	8000b7e <main+0x85a>
					state = switch7;
 800076c:	4b41      	ldr	r3, [pc, #260]	; (8000874 <main+0x550>)
 800076e:	2207      	movs	r2, #7
 8000770:	701a      	strb	r2, [r3, #0]
					flagChange = 1;
 8000772:	4b41      	ldr	r3, [pc, #260]	; (8000878 <main+0x554>)
 8000774:	2201      	movs	r2, #1
 8000776:	701a      	strb	r2, [r3, #0]
					countSecond = 0;
 8000778:	4b3c      	ldr	r3, [pc, #240]	; (800086c <main+0x548>)
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim2);
 800077e:	483a      	ldr	r0, [pc, #232]	; (8000868 <main+0x544>)
 8000780:	f001 fc14 	bl	8001fac <HAL_TIM_Base_Stop_IT>
			break;
 8000784:	e1fb      	b.n	8000b7e <main+0x85a>

		case switch7:
			if (flagChange) {
 8000786:	4b3c      	ldr	r3, [pc, #240]	; (8000878 <main+0x554>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d019      	beq.n	80007c2 <main+0x49e>
				countMili = 0;
 800078e:	4b32      	ldr	r3, [pc, #200]	; (8000858 <main+0x534>)
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Led7_GPIO_Port, Led7_Pin, 1);
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800079a:	4831      	ldr	r0, [pc, #196]	; (8000860 <main+0x53c>)
 800079c:	f000 ff56 	bl	800164c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch7_GPIO_Port, Switch7_Pin, 1);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2140      	movs	r1, #64	; 0x40
 80007a4:	482e      	ldr	r0, [pc, #184]	; (8000860 <main+0x53c>)
 80007a6:	f000 ff51 	bl	800164c <HAL_GPIO_WritePin>
				__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 80007aa:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <main+0x540>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f06f 0201 	mvn.w	r2, #1
 80007b2:	611a      	str	r2, [r3, #16]
				HAL_TIM_Base_Start_IT(&htim3);
 80007b4:	482b      	ldr	r0, [pc, #172]	; (8000864 <main+0x540>)
 80007b6:	f001 fba7 	bl	8001f08 <HAL_TIM_Base_Start_IT>
				flagChange = 0;
 80007ba:	4b2f      	ldr	r3, [pc, #188]	; (8000878 <main+0x554>)
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
					countSecond = 0;
					HAL_TIM_Base_Stop_IT(&htim2);

				}
			}
			break;
 80007c0:	e1e0      	b.n	8000b84 <main+0x860>
				if (countMili >= countMili_limit) {
 80007c2:	4b25      	ldr	r3, [pc, #148]	; (8000858 <main+0x534>)
 80007c4:	781a      	ldrb	r2, [r3, #0]
 80007c6:	4b25      	ldr	r3, [pc, #148]	; (800085c <main+0x538>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d312      	bcc.n	80007f4 <main+0x4d0>
					HAL_GPIO_WritePin(Switch7_GPIO_Port, Switch7_Pin, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2140      	movs	r1, #64	; 0x40
 80007d2:	4823      	ldr	r0, [pc, #140]	; (8000860 <main+0x53c>)
 80007d4:	f000 ff3a 	bl	800164c <HAL_GPIO_WritePin>
					HAL_TIM_Base_Stop_IT(&htim3);
 80007d8:	4822      	ldr	r0, [pc, #136]	; (8000864 <main+0x540>)
 80007da:	f001 fbe7 	bl	8001fac <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 80007de:	4b22      	ldr	r3, [pc, #136]	; (8000868 <main+0x544>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f06f 0201 	mvn.w	r2, #1
 80007e6:	611a      	str	r2, [r3, #16]
					HAL_TIM_Base_Start_IT(&htim2);
 80007e8:	481f      	ldr	r0, [pc, #124]	; (8000868 <main+0x544>)
 80007ea:	f001 fb8d 	bl	8001f08 <HAL_TIM_Base_Start_IT>
					countMili = 0;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <main+0x534>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
				if (countSecond >= countSecond_limit) {
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <main+0x548>)
 80007f6:	781a      	ldrb	r2, [r3, #0]
 80007f8:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <main+0x54c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	f0c0 81c1 	bcc.w	8000b84 <main+0x860>
					state = switch8;
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <main+0x550>)
 8000804:	2208      	movs	r2, #8
 8000806:	701a      	strb	r2, [r3, #0]
					flagChange = 1;
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <main+0x554>)
 800080a:	2201      	movs	r2, #1
 800080c:	701a      	strb	r2, [r3, #0]
					countSecond = 0;
 800080e:	4b17      	ldr	r3, [pc, #92]	; (800086c <main+0x548>)
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim2);
 8000814:	4814      	ldr	r0, [pc, #80]	; (8000868 <main+0x544>)
 8000816:	f001 fbc9 	bl	8001fac <HAL_TIM_Base_Stop_IT>
			break;
 800081a:	e1b3      	b.n	8000b84 <main+0x860>

		case switch8:
			if (flagChange) {
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <main+0x554>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d02b      	beq.n	800087c <main+0x558>
				countMili = 0;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <main+0x534>)
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Led8_GPIO_Port, Led8_Pin, 1);
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000830:	480b      	ldr	r0, [pc, #44]	; (8000860 <main+0x53c>)
 8000832:	f000 ff0b 	bl	800164c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch8_GPIO_Port, Switch8_Pin, 1);
 8000836:	2201      	movs	r2, #1
 8000838:	2180      	movs	r1, #128	; 0x80
 800083a:	4809      	ldr	r0, [pc, #36]	; (8000860 <main+0x53c>)
 800083c:	f000 ff06 	bl	800164c <HAL_GPIO_WritePin>
				__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <main+0x540>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f06f 0201 	mvn.w	r2, #1
 8000848:	611a      	str	r2, [r3, #16]
				HAL_TIM_Base_Start_IT(&htim3);
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <main+0x540>)
 800084c:	f001 fb5c 	bl	8001f08 <HAL_TIM_Base_Start_IT>
				flagChange = 0;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <main+0x554>)
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
					countSecond = 0;
					HAL_TIM_Base_Stop_IT(&htim2);

				}
			}
			break;
 8000856:	e198      	b.n	8000b8a <main+0x866>
 8000858:	200000bd 	.word	0x200000bd
 800085c:	20000001 	.word	0x20000001
 8000860:	40010800 	.word	0x40010800
 8000864:	20000074 	.word	0x20000074
 8000868:	2000002c 	.word	0x2000002c
 800086c:	200000bc 	.word	0x200000bc
 8000870:	20000000 	.word	0x20000000
 8000874:	200000c2 	.word	0x200000c2
 8000878:	200000be 	.word	0x200000be
				if (countMili >= countMili_limit) {
 800087c:	4b96      	ldr	r3, [pc, #600]	; (8000ad8 <main+0x7b4>)
 800087e:	781a      	ldrb	r2, [r3, #0]
 8000880:	4b96      	ldr	r3, [pc, #600]	; (8000adc <main+0x7b8>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	429a      	cmp	r2, r3
 8000886:	d312      	bcc.n	80008ae <main+0x58a>
					HAL_GPIO_WritePin(Switch8_GPIO_Port, Switch8_Pin, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	2180      	movs	r1, #128	; 0x80
 800088c:	4894      	ldr	r0, [pc, #592]	; (8000ae0 <main+0x7bc>)
 800088e:	f000 fedd 	bl	800164c <HAL_GPIO_WritePin>
					HAL_TIM_Base_Stop_IT(&htim3);
 8000892:	4894      	ldr	r0, [pc, #592]	; (8000ae4 <main+0x7c0>)
 8000894:	f001 fb8a 	bl	8001fac <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8000898:	4b93      	ldr	r3, [pc, #588]	; (8000ae8 <main+0x7c4>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f06f 0201 	mvn.w	r2, #1
 80008a0:	611a      	str	r2, [r3, #16]
					HAL_TIM_Base_Start_IT(&htim2);
 80008a2:	4891      	ldr	r0, [pc, #580]	; (8000ae8 <main+0x7c4>)
 80008a4:	f001 fb30 	bl	8001f08 <HAL_TIM_Base_Start_IT>
					countMili = 0;
 80008a8:	4b8b      	ldr	r3, [pc, #556]	; (8000ad8 <main+0x7b4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
				if (countSecond >= countSecond_limit) {
 80008ae:	4b8f      	ldr	r3, [pc, #572]	; (8000aec <main+0x7c8>)
 80008b0:	781a      	ldrb	r2, [r3, #0]
 80008b2:	4b8f      	ldr	r3, [pc, #572]	; (8000af0 <main+0x7cc>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	f0c0 8167 	bcc.w	8000b8a <main+0x866>
					state = switch9;
 80008bc:	4b8d      	ldr	r3, [pc, #564]	; (8000af4 <main+0x7d0>)
 80008be:	2209      	movs	r2, #9
 80008c0:	701a      	strb	r2, [r3, #0]
					flagChange = 1;
 80008c2:	4b8d      	ldr	r3, [pc, #564]	; (8000af8 <main+0x7d4>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	701a      	strb	r2, [r3, #0]
					countSecond = 0;
 80008c8:	4b88      	ldr	r3, [pc, #544]	; (8000aec <main+0x7c8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim2);
 80008ce:	4886      	ldr	r0, [pc, #536]	; (8000ae8 <main+0x7c4>)
 80008d0:	f001 fb6c 	bl	8001fac <HAL_TIM_Base_Stop_IT>
			break;
 80008d4:	e159      	b.n	8000b8a <main+0x866>

		case switch9:
			if (flagChange) {
 80008d6:	4b88      	ldr	r3, [pc, #544]	; (8000af8 <main+0x7d4>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d019      	beq.n	8000912 <main+0x5ee>
				countMili = 0;
 80008de:	4b7e      	ldr	r3, [pc, #504]	; (8000ad8 <main+0x7b4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Led9_GPIO_Port, Led9_Pin, 1);
 80008e4:	2201      	movs	r2, #1
 80008e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ea:	487d      	ldr	r0, [pc, #500]	; (8000ae0 <main+0x7bc>)
 80008ec:	f000 feae 	bl	800164c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch9_GPIO_Port, Switch9_Pin, 1);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2101      	movs	r1, #1
 80008f4:	4881      	ldr	r0, [pc, #516]	; (8000afc <main+0x7d8>)
 80008f6:	f000 fea9 	bl	800164c <HAL_GPIO_WritePin>
				__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 80008fa:	4b7a      	ldr	r3, [pc, #488]	; (8000ae4 <main+0x7c0>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f06f 0201 	mvn.w	r2, #1
 8000902:	611a      	str	r2, [r3, #16]
				HAL_TIM_Base_Start_IT(&htim3);
 8000904:	4877      	ldr	r0, [pc, #476]	; (8000ae4 <main+0x7c0>)
 8000906:	f001 faff 	bl	8001f08 <HAL_TIM_Base_Start_IT>
				flagChange = 0;
 800090a:	4b7b      	ldr	r3, [pc, #492]	; (8000af8 <main+0x7d4>)
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
					countSecond = 0;
					HAL_TIM_Base_Stop_IT(&htim2);

				}
			}
			break;
 8000910:	e13e      	b.n	8000b90 <main+0x86c>
				if (countMili >= countMili_limit) {
 8000912:	4b71      	ldr	r3, [pc, #452]	; (8000ad8 <main+0x7b4>)
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	4b71      	ldr	r3, [pc, #452]	; (8000adc <main+0x7b8>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	429a      	cmp	r2, r3
 800091c:	d312      	bcc.n	8000944 <main+0x620>
					HAL_GPIO_WritePin(Switch9_GPIO_Port, Switch9_Pin, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2101      	movs	r1, #1
 8000922:	4876      	ldr	r0, [pc, #472]	; (8000afc <main+0x7d8>)
 8000924:	f000 fe92 	bl	800164c <HAL_GPIO_WritePin>
					HAL_TIM_Base_Stop_IT(&htim3);
 8000928:	486e      	ldr	r0, [pc, #440]	; (8000ae4 <main+0x7c0>)
 800092a:	f001 fb3f 	bl	8001fac <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 800092e:	4b6e      	ldr	r3, [pc, #440]	; (8000ae8 <main+0x7c4>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f06f 0201 	mvn.w	r2, #1
 8000936:	611a      	str	r2, [r3, #16]
					HAL_TIM_Base_Start_IT(&htim2);
 8000938:	486b      	ldr	r0, [pc, #428]	; (8000ae8 <main+0x7c4>)
 800093a:	f001 fae5 	bl	8001f08 <HAL_TIM_Base_Start_IT>
					countMili = 0;
 800093e:	4b66      	ldr	r3, [pc, #408]	; (8000ad8 <main+0x7b4>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
				if (countSecond >= countSecond_limit) {
 8000944:	4b69      	ldr	r3, [pc, #420]	; (8000aec <main+0x7c8>)
 8000946:	781a      	ldrb	r2, [r3, #0]
 8000948:	4b69      	ldr	r3, [pc, #420]	; (8000af0 <main+0x7cc>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	429a      	cmp	r2, r3
 800094e:	f0c0 811f 	bcc.w	8000b90 <main+0x86c>
					state = switch10;
 8000952:	4b68      	ldr	r3, [pc, #416]	; (8000af4 <main+0x7d0>)
 8000954:	220a      	movs	r2, #10
 8000956:	701a      	strb	r2, [r3, #0]
					flagChange = 1;
 8000958:	4b67      	ldr	r3, [pc, #412]	; (8000af8 <main+0x7d4>)
 800095a:	2201      	movs	r2, #1
 800095c:	701a      	strb	r2, [r3, #0]
					countSecond = 0;
 800095e:	4b63      	ldr	r3, [pc, #396]	; (8000aec <main+0x7c8>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim2);
 8000964:	4860      	ldr	r0, [pc, #384]	; (8000ae8 <main+0x7c4>)
 8000966:	f001 fb21 	bl	8001fac <HAL_TIM_Base_Stop_IT>
			break;
 800096a:	e111      	b.n	8000b90 <main+0x86c>

		case switch10:
			if (flagChange) {
 800096c:	4b62      	ldr	r3, [pc, #392]	; (8000af8 <main+0x7d4>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d019      	beq.n	80009a8 <main+0x684>
				countMili = 0;
 8000974:	4b58      	ldr	r3, [pc, #352]	; (8000ad8 <main+0x7b4>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Led10_GPIO_Port, Led10_Pin, 1);
 800097a:	2201      	movs	r2, #1
 800097c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000980:	4857      	ldr	r0, [pc, #348]	; (8000ae0 <main+0x7bc>)
 8000982:	f000 fe63 	bl	800164c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch10_GPIO_Port, Switch10_Pin, 1);
 8000986:	2201      	movs	r2, #1
 8000988:	2102      	movs	r1, #2
 800098a:	485c      	ldr	r0, [pc, #368]	; (8000afc <main+0x7d8>)
 800098c:	f000 fe5e 	bl	800164c <HAL_GPIO_WritePin>
				__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8000990:	4b54      	ldr	r3, [pc, #336]	; (8000ae4 <main+0x7c0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f06f 0201 	mvn.w	r2, #1
 8000998:	611a      	str	r2, [r3, #16]
				HAL_TIM_Base_Start_IT(&htim3);
 800099a:	4852      	ldr	r0, [pc, #328]	; (8000ae4 <main+0x7c0>)
 800099c:	f001 fab4 	bl	8001f08 <HAL_TIM_Base_Start_IT>
				flagChange = 0;
 80009a0:	4b55      	ldr	r3, [pc, #340]	; (8000af8 <main+0x7d4>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
					countSecond = 0;
					HAL_TIM_Base_Stop_IT(&htim2);

				}
			}
			break;
 80009a6:	e0f6      	b.n	8000b96 <main+0x872>
				if (countMili >= countMili_limit) {
 80009a8:	4b4b      	ldr	r3, [pc, #300]	; (8000ad8 <main+0x7b4>)
 80009aa:	781a      	ldrb	r2, [r3, #0]
 80009ac:	4b4b      	ldr	r3, [pc, #300]	; (8000adc <main+0x7b8>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d312      	bcc.n	80009da <main+0x6b6>
					HAL_GPIO_WritePin(Switch10_GPIO_Port, Switch10_Pin, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2102      	movs	r1, #2
 80009b8:	4850      	ldr	r0, [pc, #320]	; (8000afc <main+0x7d8>)
 80009ba:	f000 fe47 	bl	800164c <HAL_GPIO_WritePin>
					HAL_TIM_Base_Stop_IT(&htim3);
 80009be:	4849      	ldr	r0, [pc, #292]	; (8000ae4 <main+0x7c0>)
 80009c0:	f001 faf4 	bl	8001fac <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 80009c4:	4b48      	ldr	r3, [pc, #288]	; (8000ae8 <main+0x7c4>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f06f 0201 	mvn.w	r2, #1
 80009cc:	611a      	str	r2, [r3, #16]
					HAL_TIM_Base_Start_IT(&htim2);
 80009ce:	4846      	ldr	r0, [pc, #280]	; (8000ae8 <main+0x7c4>)
 80009d0:	f001 fa9a 	bl	8001f08 <HAL_TIM_Base_Start_IT>
					countMili = 0;
 80009d4:	4b40      	ldr	r3, [pc, #256]	; (8000ad8 <main+0x7b4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
				if (countSecond >= countSecond_limit) {
 80009da:	4b44      	ldr	r3, [pc, #272]	; (8000aec <main+0x7c8>)
 80009dc:	781a      	ldrb	r2, [r3, #0]
 80009de:	4b44      	ldr	r3, [pc, #272]	; (8000af0 <main+0x7cc>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	f0c0 80d7 	bcc.w	8000b96 <main+0x872>
					state = switch11;
 80009e8:	4b42      	ldr	r3, [pc, #264]	; (8000af4 <main+0x7d0>)
 80009ea:	220b      	movs	r2, #11
 80009ec:	701a      	strb	r2, [r3, #0]
					flagChange = 1;
 80009ee:	4b42      	ldr	r3, [pc, #264]	; (8000af8 <main+0x7d4>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	701a      	strb	r2, [r3, #0]
					countSecond = 0;
 80009f4:	4b3d      	ldr	r3, [pc, #244]	; (8000aec <main+0x7c8>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim2);
 80009fa:	483b      	ldr	r0, [pc, #236]	; (8000ae8 <main+0x7c4>)
 80009fc:	f001 fad6 	bl	8001fac <HAL_TIM_Base_Stop_IT>
			break;
 8000a00:	e0c9      	b.n	8000b96 <main+0x872>
		case switch11:
			if (flagChange) {
 8000a02:	4b3d      	ldr	r3, [pc, #244]	; (8000af8 <main+0x7d4>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d019      	beq.n	8000a3e <main+0x71a>
				countMili = 0;
 8000a0a:	4b33      	ldr	r3, [pc, #204]	; (8000ad8 <main+0x7b4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Led11_GPIO_Port, Led11_Pin, 1);
 8000a10:	2201      	movs	r2, #1
 8000a12:	2108      	movs	r1, #8
 8000a14:	4839      	ldr	r0, [pc, #228]	; (8000afc <main+0x7d8>)
 8000a16:	f000 fe19 	bl	800164c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch11_GPIO_Port, Switch11_Pin, 1);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a20:	4836      	ldr	r0, [pc, #216]	; (8000afc <main+0x7d8>)
 8000a22:	f000 fe13 	bl	800164c <HAL_GPIO_WritePin>
				__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8000a26:	4b2f      	ldr	r3, [pc, #188]	; (8000ae4 <main+0x7c0>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f06f 0201 	mvn.w	r2, #1
 8000a2e:	611a      	str	r2, [r3, #16]
				HAL_TIM_Base_Start_IT(&htim3);
 8000a30:	482c      	ldr	r0, [pc, #176]	; (8000ae4 <main+0x7c0>)
 8000a32:	f001 fa69 	bl	8001f08 <HAL_TIM_Base_Start_IT>
				flagChange = 0;
 8000a36:	4b30      	ldr	r3, [pc, #192]	; (8000af8 <main+0x7d4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
					countSecond = 0;
					HAL_TIM_Base_Stop_IT(&htim2);

				}
			}
			break;
 8000a3c:	e0ae      	b.n	8000b9c <main+0x878>
				if (countMili >= countMili_limit) {
 8000a3e:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <main+0x7b4>)
 8000a40:	781a      	ldrb	r2, [r3, #0]
 8000a42:	4b26      	ldr	r3, [pc, #152]	; (8000adc <main+0x7b8>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d313      	bcc.n	8000a72 <main+0x74e>
					HAL_GPIO_WritePin(Switch11_GPIO_Port, Switch11_Pin, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a50:	482a      	ldr	r0, [pc, #168]	; (8000afc <main+0x7d8>)
 8000a52:	f000 fdfb 	bl	800164c <HAL_GPIO_WritePin>
					HAL_TIM_Base_Stop_IT(&htim3);
 8000a56:	4823      	ldr	r0, [pc, #140]	; (8000ae4 <main+0x7c0>)
 8000a58:	f001 faa8 	bl	8001fac <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8000a5c:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <main+0x7c4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f06f 0201 	mvn.w	r2, #1
 8000a64:	611a      	str	r2, [r3, #16]
					HAL_TIM_Base_Start_IT(&htim2);
 8000a66:	4820      	ldr	r0, [pc, #128]	; (8000ae8 <main+0x7c4>)
 8000a68:	f001 fa4e 	bl	8001f08 <HAL_TIM_Base_Start_IT>
					countMili = 0;
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <main+0x7b4>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
				if (countSecond >= countSecond_limit) {
 8000a72:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <main+0x7c8>)
 8000a74:	781a      	ldrb	r2, [r3, #0]
 8000a76:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <main+0x7cc>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	f0c0 808e 	bcc.w	8000b9c <main+0x878>
					state = switch12;
 8000a80:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <main+0x7d0>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	701a      	strb	r2, [r3, #0]
					flagChange = 1;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <main+0x7d4>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	701a      	strb	r2, [r3, #0]
					countSecond = 0;
 8000a8c:	4b17      	ldr	r3, [pc, #92]	; (8000aec <main+0x7c8>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim2);
 8000a92:	4815      	ldr	r0, [pc, #84]	; (8000ae8 <main+0x7c4>)
 8000a94:	f001 fa8a 	bl	8001fac <HAL_TIM_Base_Stop_IT>
			break;
 8000a98:	e080      	b.n	8000b9c <main+0x878>
		case switch12:
			if (flagChange) {
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <main+0x7d4>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d02e      	beq.n	8000b00 <main+0x7dc>
				countMili = 0;
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <main+0x7b4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Led12_GPIO_Port, Led12_Pin, 1);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2110      	movs	r1, #16
 8000aac:	4813      	ldr	r0, [pc, #76]	; (8000afc <main+0x7d8>)
 8000aae:	f000 fdcd 	bl	800164c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Switch12_GPIO_Port, Switch12_Pin, 1);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab8:	4810      	ldr	r0, [pc, #64]	; (8000afc <main+0x7d8>)
 8000aba:	f000 fdc7 	bl	800164c <HAL_GPIO_WritePin>
				__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <main+0x7c0>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f06f 0201 	mvn.w	r2, #1
 8000ac6:	611a      	str	r2, [r3, #16]
				HAL_TIM_Base_Start_IT(&htim3);
 8000ac8:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <main+0x7c0>)
 8000aca:	f001 fa1d 	bl	8001f08 <HAL_TIM_Base_Start_IT>
				flagChange = 0;
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <main+0x7d4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
					countSecond = 0;
					HAL_TIM_Base_Stop_IT(&htim2);

				}
			}
			break;
 8000ad4:	e065      	b.n	8000ba2 <main+0x87e>
 8000ad6:	bf00      	nop
 8000ad8:	200000bd 	.word	0x200000bd
 8000adc:	20000001 	.word	0x20000001
 8000ae0:	40010800 	.word	0x40010800
 8000ae4:	20000074 	.word	0x20000074
 8000ae8:	2000002c 	.word	0x2000002c
 8000aec:	200000bc 	.word	0x200000bc
 8000af0:	20000000 	.word	0x20000000
 8000af4:	200000c2 	.word	0x200000c2
 8000af8:	200000be 	.word	0x200000be
 8000afc:	40010c00 	.word	0x40010c00
				if (countMili >= countMili_limit) {
 8000b00:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <main+0x884>)
 8000b02:	781a      	ldrb	r2, [r3, #0]
 8000b04:	4b29      	ldr	r3, [pc, #164]	; (8000bac <main+0x888>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d313      	bcc.n	8000b34 <main+0x810>
					HAL_GPIO_WritePin(Switch12_GPIO_Port, Switch12_Pin, 0);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b12:	4827      	ldr	r0, [pc, #156]	; (8000bb0 <main+0x88c>)
 8000b14:	f000 fd9a 	bl	800164c <HAL_GPIO_WritePin>
					HAL_TIM_Base_Stop_IT(&htim3);
 8000b18:	4826      	ldr	r0, [pc, #152]	; (8000bb4 <main+0x890>)
 8000b1a:	f001 fa47 	bl	8001fac <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8000b1e:	4b26      	ldr	r3, [pc, #152]	; (8000bb8 <main+0x894>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f06f 0201 	mvn.w	r2, #1
 8000b26:	611a      	str	r2, [r3, #16]
					HAL_TIM_Base_Start_IT(&htim2);
 8000b28:	4823      	ldr	r0, [pc, #140]	; (8000bb8 <main+0x894>)
 8000b2a:	f001 f9ed 	bl	8001f08 <HAL_TIM_Base_Start_IT>
					countMili = 0;
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <main+0x884>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]
				if (countSecond >= countSecond_limit) {
 8000b34:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <main+0x898>)
 8000b36:	781a      	ldrb	r2, [r3, #0]
 8000b38:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <main+0x89c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d330      	bcc.n	8000ba2 <main+0x87e>
					state = stop;
 8000b40:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <main+0x8a0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
					flagChange = 1;
 8000b46:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <main+0x8a4>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]
					countSecond = 0;
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <main+0x898>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim2);
 8000b52:	4819      	ldr	r0, [pc, #100]	; (8000bb8 <main+0x894>)
 8000b54:	f001 fa2a 	bl	8001fac <HAL_TIM_Base_Stop_IT>
			break;
 8000b58:	e023      	b.n	8000ba2 <main+0x87e>
			break;
 8000b5a:	bf00      	nop
 8000b5c:	f7ff bbf0 	b.w	8000340 <main+0x1c>
			break;
 8000b60:	bf00      	nop
 8000b62:	f7ff bbed 	b.w	8000340 <main+0x1c>
			break;
 8000b66:	bf00      	nop
 8000b68:	f7ff bbea 	b.w	8000340 <main+0x1c>
			break;
 8000b6c:	bf00      	nop
 8000b6e:	f7ff bbe7 	b.w	8000340 <main+0x1c>
			break;
 8000b72:	bf00      	nop
 8000b74:	f7ff bbe4 	b.w	8000340 <main+0x1c>
			break;
 8000b78:	bf00      	nop
 8000b7a:	f7ff bbe1 	b.w	8000340 <main+0x1c>
			break;
 8000b7e:	bf00      	nop
 8000b80:	f7ff bbde 	b.w	8000340 <main+0x1c>
			break;
 8000b84:	bf00      	nop
 8000b86:	f7ff bbdb 	b.w	8000340 <main+0x1c>
			break;
 8000b8a:	bf00      	nop
 8000b8c:	f7ff bbd8 	b.w	8000340 <main+0x1c>
			break;
 8000b90:	bf00      	nop
 8000b92:	f7ff bbd5 	b.w	8000340 <main+0x1c>
			break;
 8000b96:	bf00      	nop
 8000b98:	f7ff bbd2 	b.w	8000340 <main+0x1c>
			break;
 8000b9c:	bf00      	nop
 8000b9e:	f7ff bbcf 	b.w	8000340 <main+0x1c>
			break;
 8000ba2:	bf00      	nop
 8000ba4:	f7ff bbcc 	b.w	8000340 <main+0x1c>
 8000ba8:	200000bd 	.word	0x200000bd
 8000bac:	20000001 	.word	0x20000001
 8000bb0:	40010c00 	.word	0x40010c00
 8000bb4:	20000074 	.word	0x20000074
 8000bb8:	2000002c 	.word	0x2000002c
 8000bbc:	200000bc 	.word	0x200000bc
 8000bc0:	20000000 	.word	0x20000000
 8000bc4:	200000c2 	.word	0x200000c2
 8000bc8:	200000be 	.word	0x200000be

08000bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b090      	sub	sp, #64	; 0x40
 8000bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd2:	f107 0318 	add.w	r3, r7, #24
 8000bd6:	2228      	movs	r2, #40	; 0x28
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 fd70 	bl	80026c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf6:	2310      	movs	r3, #16
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfe:	f107 0318 	add.w	r3, r7, #24
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 fd52 	bl	80016ac <HAL_RCC_OscConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c0e:	f000 f93d 	bl	8000e8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c12:	230f      	movs	r3, #15
 8000c14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 ffc0 	bl	8001bb0 <HAL_RCC_ClockConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c36:	f000 f929 	bl	8000e8c <Error_Handler>
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	3740      	adds	r7, #64	; 0x40
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c4a:	f107 0308 	add.w	r3, r7, #8
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c58:	463b      	mov	r3, r7
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c60:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <MX_TIM2_Init+0x98>)
 8000c62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000c68:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <MX_TIM2_Init+0x98>)
 8000c6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <MX_TIM2_Init+0x98>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999;
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <MX_TIM2_Init+0x98>)
 8000c78:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7e:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <MX_TIM2_Init+0x98>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c84:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <MX_TIM2_Init+0x98>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c8a:	4814      	ldr	r0, [pc, #80]	; (8000cdc <MX_TIM2_Init+0x98>)
 8000c8c:	f001 f8ec 	bl	8001e68 <HAL_TIM_Base_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c96:	f000 f8f9 	bl	8000e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ca0:	f107 0308 	add.w	r3, r7, #8
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <MX_TIM2_Init+0x98>)
 8000ca8:	f001 fab6 	bl	8002218 <HAL_TIM_ConfigClockSource>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000cb2:	f000 f8eb 	bl	8000e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4806      	ldr	r0, [pc, #24]	; (8000cdc <MX_TIM2_Init+0x98>)
 8000cc4:	f001 fc8c 	bl	80025e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000cce:	f000 f8dd 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2000002c 	.word	0x2000002c

08000ce0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce6:	f107 0308 	add.w	r3, r7, #8
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <MX_TIM3_Init+0x94>)
 8000cfe:	4a1e      	ldr	r2, [pc, #120]	; (8000d78 <MX_TIM3_Init+0x98>)
 8000d00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000d02:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <MX_TIM3_Init+0x94>)
 8000d04:	223f      	movs	r2, #63	; 0x3f
 8000d06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d08:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <MX_TIM3_Init+0x94>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 62499;
 8000d0e:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <MX_TIM3_Init+0x94>)
 8000d10:	f24f 4223 	movw	r2, #62499	; 0xf423
 8000d14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d16:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <MX_TIM3_Init+0x94>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1c:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <MX_TIM3_Init+0x94>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d22:	4814      	ldr	r0, [pc, #80]	; (8000d74 <MX_TIM3_Init+0x94>)
 8000d24:	f001 f8a0 	bl	8001e68 <HAL_TIM_Base_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000d2e:	f000 f8ad 	bl	8000e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d38:	f107 0308 	add.w	r3, r7, #8
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480d      	ldr	r0, [pc, #52]	; (8000d74 <MX_TIM3_Init+0x94>)
 8000d40:	f001 fa6a 	bl	8002218 <HAL_TIM_ConfigClockSource>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000d4a:	f000 f89f 	bl	8000e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d56:	463b      	mov	r3, r7
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4806      	ldr	r0, [pc, #24]	; (8000d74 <MX_TIM3_Init+0x94>)
 8000d5c:	f001 fc40 	bl	80025e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000d66:	f000 f891 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000074 	.word	0x20000074
 8000d78:	40000400 	.word	0x40000400

08000d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d82:	f107 0310 	add.w	r3, r7, #16
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d90:	4b39      	ldr	r3, [pc, #228]	; (8000e78 <MX_GPIO_Init+0xfc>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a38      	ldr	r2, [pc, #224]	; (8000e78 <MX_GPIO_Init+0xfc>)
 8000d96:	f043 0320 	orr.w	r3, r3, #32
 8000d9a:	6193      	str	r3, [r2, #24]
 8000d9c:	4b36      	ldr	r3, [pc, #216]	; (8000e78 <MX_GPIO_Init+0xfc>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f003 0320 	and.w	r3, r3, #32
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	4b33      	ldr	r3, [pc, #204]	; (8000e78 <MX_GPIO_Init+0xfc>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a32      	ldr	r2, [pc, #200]	; (8000e78 <MX_GPIO_Init+0xfc>)
 8000dae:	f043 0304 	orr.w	r3, r3, #4
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <MX_GPIO_Init+0xfc>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc0:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <MX_GPIO_Init+0xfc>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a2c      	ldr	r2, [pc, #176]	; (8000e78 <MX_GPIO_Init+0xfc>)
 8000dc6:	f043 0308 	orr.w	r3, r3, #8
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <MX_GPIO_Init+0xfc>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0308 	and.w	r3, r3, #8
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Switch1_Pin|Switch2_Pin|Switch3_Pin|Switch4_Pin
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f649 71ff 	movw	r1, #40959	; 0x9fff
 8000dde:	4827      	ldr	r0, [pc, #156]	; (8000e7c <MX_GPIO_Init+0x100>)
 8000de0:	f000 fc34 	bl	800164c <HAL_GPIO_WritePin>
                          |Switch5_Pin|Switch6_Pin|Switch7_Pin|Switch8_Pin
                          |Led5_Pin|Led6_Pin|Led7_Pin|Led8_Pin
                          |Led9_Pin|Led10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Switch9_Pin|Switch10_Pin|Switch11_Pin|Switch12_Pin
 8000de4:	2200      	movs	r2, #0
 8000de6:	f64f 411b 	movw	r1, #64539	; 0xfc1b
 8000dea:	4825      	ldr	r0, [pc, #148]	; (8000e80 <MX_GPIO_Init+0x104>)
 8000dec:	f000 fc2e 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Switch1_Pin Switch2_Pin Switch3_Pin Switch4_Pin
                           Switch5_Pin Switch6_Pin Switch7_Pin Switch8_Pin
                           Led5_Pin Led6_Pin Led7_Pin Led8_Pin
                           Led9_Pin Led10_Pin */
  GPIO_InitStruct.Pin = Switch1_Pin|Switch2_Pin|Switch3_Pin|Switch4_Pin
 8000df0:	f649 73ff 	movw	r3, #40959	; 0x9fff
 8000df4:	613b      	str	r3, [r7, #16]
                          |Switch5_Pin|Switch6_Pin|Switch7_Pin|Switch8_Pin
                          |Led5_Pin|Led6_Pin|Led7_Pin|Led8_Pin
                          |Led9_Pin|Led10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	4619      	mov	r1, r3
 8000e08:	481c      	ldr	r0, [pc, #112]	; (8000e7c <MX_GPIO_Init+0x100>)
 8000e0a:	f000 fa9b 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch9_Pin Switch10_Pin Switch11_Pin Switch12_Pin
                           Led1_Pin Led2_Pin Led3_Pin Led4_Pin
                           Led11_Pin Led12_Pin */
  GPIO_InitStruct.Pin = Switch9_Pin|Switch10_Pin|Switch11_Pin|Switch12_Pin
 8000e0e:	f64f 431b 	movw	r3, #64539	; 0xfc1b
 8000e12:	613b      	str	r3, [r7, #16]
                          |Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin
                          |Led11_Pin|Led12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	4619      	mov	r1, r3
 8000e26:	4816      	ldr	r0, [pc, #88]	; (8000e80 <MX_GPIO_Init+0x104>)
 8000e28:	f000 fa8c 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : StartButt_Pin */
  GPIO_InitStruct.Pin = StartButt_Pin;
 8000e2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e32:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <MX_GPIO_Init+0x108>)
 8000e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(StartButt_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 0310 	add.w	r3, r7, #16
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480f      	ldr	r0, [pc, #60]	; (8000e80 <MX_GPIO_Init+0x104>)
 8000e42:	f000 fa7f 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : StopButt_Pin */
  GPIO_InitStruct.Pin = StopButt_Pin;
 8000e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_GPIO_Init+0x10c>)
 8000e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(StopButt_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4809      	ldr	r0, [pc, #36]	; (8000e80 <MX_GPIO_Init+0x104>)
 8000e5c:	f000 fa72 	bl	8001344 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	2017      	movs	r0, #23
 8000e66:	f000 fa36 	bl	80012d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e6a:	2017      	movs	r0, #23
 8000e6c:	f000 fa4f 	bl	800130e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e70:	bf00      	nop
 8000e72:	3720      	adds	r7, #32
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40010800 	.word	0x40010800
 8000e80:	40010c00 	.word	0x40010c00
 8000e84:	10210000 	.word	0x10210000
 8000e88:	10110000 	.word	0x10110000

08000e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e90:	b672      	cpsid	i
}
 8000e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e94:	e7fe      	b.n	8000e94 <Error_Handler+0x8>
	...

08000e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <HAL_MspInit+0x5c>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <HAL_MspInit+0x5c>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6193      	str	r3, [r2, #24]
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_MspInit+0x5c>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <HAL_MspInit+0x5c>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <HAL_MspInit+0x5c>)
 8000ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	61d3      	str	r3, [r2, #28]
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <HAL_MspInit+0x5c>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_MspInit+0x60>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <HAL_MspInit+0x60>)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010000 	.word	0x40010000

08000efc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f0c:	d114      	bne.n	8000f38 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_TIM_Base_MspInit+0x78>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	4a18      	ldr	r2, [pc, #96]	; (8000f74 <HAL_TIM_Base_MspInit+0x78>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	61d3      	str	r3, [r2, #28]
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <HAL_TIM_Base_MspInit+0x78>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	201c      	movs	r0, #28
 8000f2c:	f000 f9d3 	bl	80012d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f30:	201c      	movs	r0, #28
 8000f32:	f000 f9ec 	bl	800130e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f36:	e018      	b.n	8000f6a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <HAL_TIM_Base_MspInit+0x7c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d113      	bne.n	8000f6a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <HAL_TIM_Base_MspInit+0x78>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <HAL_TIM_Base_MspInit+0x78>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	61d3      	str	r3, [r2, #28]
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_TIM_Base_MspInit+0x78>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	201d      	movs	r0, #29
 8000f60:	f000 f9b9 	bl	80012d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f64:	201d      	movs	r0, #29
 8000f66:	f000 f9d2 	bl	800130e <HAL_NVIC_EnableIRQ>
}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40000400 	.word	0x40000400

08000f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f80:	e7fe      	b.n	8000f80 <NMI_Handler+0x4>

08000f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <HardFault_Handler+0x4>

08000f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <MemManage_Handler+0x4>

08000f8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr

08000fa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr

08000fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr

08000fbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc2:	f000 f895 	bl	80010f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(StartButt_Pin);
 8000fce:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000fd2:	f000 fb53 	bl	800167c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(StopButt_Pin);
 8000fd6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fda:	f000 fb4f 	bl	800167c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <TIM2_IRQHandler+0x10>)
 8000fea:	f001 f80d 	bl	8002008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000002c 	.word	0x2000002c

08000ff8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <TIM3_IRQHandler+0x10>)
 8000ffe:	f001 f803 	bl	8002008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000074 	.word	0x20000074

0800100c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001018:	f7ff fff8 	bl	800100c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800101c:	480b      	ldr	r0, [pc, #44]	; (800104c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800101e:	490c      	ldr	r1, [pc, #48]	; (8001050 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001020:	4a0c      	ldr	r2, [pc, #48]	; (8001054 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a09      	ldr	r2, [pc, #36]	; (8001058 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001034:	4c09      	ldr	r4, [pc, #36]	; (800105c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001042:	f001 fb45 	bl	80026d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001046:	f7ff f96d 	bl	8000324 <main>
  bx lr
 800104a:	4770      	bx	lr
  ldr r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001050:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001054:	0800275c 	.word	0x0800275c
  ldr r2, =_sbss
 8001058:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800105c:	200000c8 	.word	0x200000c8

08001060 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC1_2_IRQHandler>
	...

08001064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <HAL_Init+0x28>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <HAL_Init+0x28>)
 800106e:	f043 0310 	orr.w	r3, r3, #16
 8001072:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001074:	2003      	movs	r0, #3
 8001076:	f000 f923 	bl	80012c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107a:	200f      	movs	r0, #15
 800107c:	f000 f808 	bl	8001090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001080:	f7ff ff0a 	bl	8000e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40022000 	.word	0x40022000

08001090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_InitTick+0x54>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_InitTick+0x58>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f93b 	bl	800132a <HAL_SYSTICK_Config>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00e      	b.n	80010dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b0f      	cmp	r3, #15
 80010c2:	d80a      	bhi.n	80010da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c4:	2200      	movs	r2, #0
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f000 f903 	bl	80012d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d0:	4a06      	ldr	r2, [pc, #24]	; (80010ec <HAL_InitTick+0x5c>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	e000      	b.n	80010dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000004 	.word	0x20000004
 80010e8:	2000000c 	.word	0x2000000c
 80010ec:	20000008 	.word	0x20000008

080010f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <HAL_IncTick+0x1c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <HAL_IncTick+0x20>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	4a03      	ldr	r2, [pc, #12]	; (8001110 <HAL_IncTick+0x20>)
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	2000000c 	.word	0x2000000c
 8001110:	200000c4 	.word	0x200000c4

08001114 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return uwTick;
 8001118:	4b02      	ldr	r3, [pc, #8]	; (8001124 <HAL_GetTick+0x10>)
 800111a:	681b      	ldr	r3, [r3, #0]
}
 800111c:	4618      	mov	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr
 8001124:	200000c4 	.word	0x200000c4

08001128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001144:	4013      	ands	r3, r2
 8001146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115a:	4a04      	ldr	r2, [pc, #16]	; (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	60d3      	str	r3, [r2, #12]
}
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <__NVIC_GetPriorityGrouping+0x18>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	f003 0307 	and.w	r3, r3, #7
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	2b00      	cmp	r3, #0
 800119c:	db0b      	blt.n	80011b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	f003 021f 	and.w	r2, r3, #31
 80011a4:	4906      	ldr	r1, [pc, #24]	; (80011c0 <__NVIC_EnableIRQ+0x34>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	095b      	lsrs	r3, r3, #5
 80011ac:	2001      	movs	r0, #1
 80011ae:	fa00 f202 	lsl.w	r2, r0, r2
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	e000e100 	.word	0xe000e100

080011c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db0a      	blt.n	80011ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	490c      	ldr	r1, [pc, #48]	; (8001210 <__NVIC_SetPriority+0x4c>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ec:	e00a      	b.n	8001204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4908      	ldr	r1, [pc, #32]	; (8001214 <__NVIC_SetPriority+0x50>)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	3b04      	subs	r3, #4
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	440b      	add	r3, r1
 8001202:	761a      	strb	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f1c3 0307 	rsb	r3, r3, #7
 8001232:	2b04      	cmp	r3, #4
 8001234:	bf28      	it	cs
 8001236:	2304      	movcs	r3, #4
 8001238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3304      	adds	r3, #4
 800123e:	2b06      	cmp	r3, #6
 8001240:	d902      	bls.n	8001248 <NVIC_EncodePriority+0x30>
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3b03      	subs	r3, #3
 8001246:	e000      	b.n	800124a <NVIC_EncodePriority+0x32>
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	f04f 32ff 	mov.w	r2, #4294967295
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	401a      	ands	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001260:	f04f 31ff 	mov.w	r1, #4294967295
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	43d9      	mvns	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	4313      	orrs	r3, r2
         );
}
 8001272:	4618      	mov	r0, r3
 8001274:	3724      	adds	r7, #36	; 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800128c:	d301      	bcc.n	8001292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128e:	2301      	movs	r3, #1
 8001290:	e00f      	b.n	80012b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <SysTick_Config+0x40>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129a:	210f      	movs	r1, #15
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f7ff ff90 	bl	80011c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <SysTick_Config+0x40>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <SysTick_Config+0x40>)
 80012ac:	2207      	movs	r2, #7
 80012ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	e000e010 	.word	0xe000e010

080012c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff2d 	bl	8001128 <__NVIC_SetPriorityGrouping>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b086      	sub	sp, #24
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e8:	f7ff ff42 	bl	8001170 <__NVIC_GetPriorityGrouping>
 80012ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	6978      	ldr	r0, [r7, #20]
 80012f4:	f7ff ff90 	bl	8001218 <NVIC_EncodePriority>
 80012f8:	4602      	mov	r2, r0
 80012fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff5f 	bl	80011c4 <__NVIC_SetPriority>
}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff35 	bl	800118c <__NVIC_EnableIRQ>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ffa2 	bl	800127c <SysTick_Config>
 8001338:	4603      	mov	r3, r0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001344:	b480      	push	{r7}
 8001346:	b08b      	sub	sp, #44	; 0x2c
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001356:	e169      	b.n	800162c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001358:	2201      	movs	r2, #1
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	429a      	cmp	r2, r3
 8001372:	f040 8158 	bne.w	8001626 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	4a9a      	ldr	r2, [pc, #616]	; (80015e4 <HAL_GPIO_Init+0x2a0>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d05e      	beq.n	800143e <HAL_GPIO_Init+0xfa>
 8001380:	4a98      	ldr	r2, [pc, #608]	; (80015e4 <HAL_GPIO_Init+0x2a0>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d875      	bhi.n	8001472 <HAL_GPIO_Init+0x12e>
 8001386:	4a98      	ldr	r2, [pc, #608]	; (80015e8 <HAL_GPIO_Init+0x2a4>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d058      	beq.n	800143e <HAL_GPIO_Init+0xfa>
 800138c:	4a96      	ldr	r2, [pc, #600]	; (80015e8 <HAL_GPIO_Init+0x2a4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d86f      	bhi.n	8001472 <HAL_GPIO_Init+0x12e>
 8001392:	4a96      	ldr	r2, [pc, #600]	; (80015ec <HAL_GPIO_Init+0x2a8>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d052      	beq.n	800143e <HAL_GPIO_Init+0xfa>
 8001398:	4a94      	ldr	r2, [pc, #592]	; (80015ec <HAL_GPIO_Init+0x2a8>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d869      	bhi.n	8001472 <HAL_GPIO_Init+0x12e>
 800139e:	4a94      	ldr	r2, [pc, #592]	; (80015f0 <HAL_GPIO_Init+0x2ac>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d04c      	beq.n	800143e <HAL_GPIO_Init+0xfa>
 80013a4:	4a92      	ldr	r2, [pc, #584]	; (80015f0 <HAL_GPIO_Init+0x2ac>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d863      	bhi.n	8001472 <HAL_GPIO_Init+0x12e>
 80013aa:	4a92      	ldr	r2, [pc, #584]	; (80015f4 <HAL_GPIO_Init+0x2b0>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d046      	beq.n	800143e <HAL_GPIO_Init+0xfa>
 80013b0:	4a90      	ldr	r2, [pc, #576]	; (80015f4 <HAL_GPIO_Init+0x2b0>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d85d      	bhi.n	8001472 <HAL_GPIO_Init+0x12e>
 80013b6:	2b12      	cmp	r3, #18
 80013b8:	d82a      	bhi.n	8001410 <HAL_GPIO_Init+0xcc>
 80013ba:	2b12      	cmp	r3, #18
 80013bc:	d859      	bhi.n	8001472 <HAL_GPIO_Init+0x12e>
 80013be:	a201      	add	r2, pc, #4	; (adr r2, 80013c4 <HAL_GPIO_Init+0x80>)
 80013c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c4:	0800143f 	.word	0x0800143f
 80013c8:	08001419 	.word	0x08001419
 80013cc:	0800142b 	.word	0x0800142b
 80013d0:	0800146d 	.word	0x0800146d
 80013d4:	08001473 	.word	0x08001473
 80013d8:	08001473 	.word	0x08001473
 80013dc:	08001473 	.word	0x08001473
 80013e0:	08001473 	.word	0x08001473
 80013e4:	08001473 	.word	0x08001473
 80013e8:	08001473 	.word	0x08001473
 80013ec:	08001473 	.word	0x08001473
 80013f0:	08001473 	.word	0x08001473
 80013f4:	08001473 	.word	0x08001473
 80013f8:	08001473 	.word	0x08001473
 80013fc:	08001473 	.word	0x08001473
 8001400:	08001473 	.word	0x08001473
 8001404:	08001473 	.word	0x08001473
 8001408:	08001421 	.word	0x08001421
 800140c:	08001435 	.word	0x08001435
 8001410:	4a79      	ldr	r2, [pc, #484]	; (80015f8 <HAL_GPIO_Init+0x2b4>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d013      	beq.n	800143e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001416:	e02c      	b.n	8001472 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	623b      	str	r3, [r7, #32]
          break;
 800141e:	e029      	b.n	8001474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	3304      	adds	r3, #4
 8001426:	623b      	str	r3, [r7, #32]
          break;
 8001428:	e024      	b.n	8001474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	3308      	adds	r3, #8
 8001430:	623b      	str	r3, [r7, #32]
          break;
 8001432:	e01f      	b.n	8001474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	330c      	adds	r3, #12
 800143a:	623b      	str	r3, [r7, #32]
          break;
 800143c:	e01a      	b.n	8001474 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d102      	bne.n	800144c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001446:	2304      	movs	r3, #4
 8001448:	623b      	str	r3, [r7, #32]
          break;
 800144a:	e013      	b.n	8001474 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d105      	bne.n	8001460 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001454:	2308      	movs	r3, #8
 8001456:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69fa      	ldr	r2, [r7, #28]
 800145c:	611a      	str	r2, [r3, #16]
          break;
 800145e:	e009      	b.n	8001474 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001460:	2308      	movs	r3, #8
 8001462:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69fa      	ldr	r2, [r7, #28]
 8001468:	615a      	str	r2, [r3, #20]
          break;
 800146a:	e003      	b.n	8001474 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
          break;
 8001470:	e000      	b.n	8001474 <HAL_GPIO_Init+0x130>
          break;
 8001472:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	2bff      	cmp	r3, #255	; 0xff
 8001478:	d801      	bhi.n	800147e <HAL_GPIO_Init+0x13a>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	e001      	b.n	8001482 <HAL_GPIO_Init+0x13e>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3304      	adds	r3, #4
 8001482:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	2bff      	cmp	r3, #255	; 0xff
 8001488:	d802      	bhi.n	8001490 <HAL_GPIO_Init+0x14c>
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	e002      	b.n	8001496 <HAL_GPIO_Init+0x152>
 8001490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001492:	3b08      	subs	r3, #8
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	210f      	movs	r1, #15
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	fa01 f303 	lsl.w	r3, r1, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	401a      	ands	r2, r3
 80014a8:	6a39      	ldr	r1, [r7, #32]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	fa01 f303 	lsl.w	r3, r1, r3
 80014b0:	431a      	orrs	r2, r3
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 80b1 	beq.w	8001626 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014c4:	4b4d      	ldr	r3, [pc, #308]	; (80015fc <HAL_GPIO_Init+0x2b8>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	4a4c      	ldr	r2, [pc, #304]	; (80015fc <HAL_GPIO_Init+0x2b8>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6193      	str	r3, [r2, #24]
 80014d0:	4b4a      	ldr	r3, [pc, #296]	; (80015fc <HAL_GPIO_Init+0x2b8>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014dc:	4a48      	ldr	r2, [pc, #288]	; (8001600 <HAL_GPIO_Init+0x2bc>)
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	089b      	lsrs	r3, r3, #2
 80014e2:	3302      	adds	r3, #2
 80014e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	220f      	movs	r2, #15
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	4013      	ands	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a40      	ldr	r2, [pc, #256]	; (8001604 <HAL_GPIO_Init+0x2c0>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d013      	beq.n	8001530 <HAL_GPIO_Init+0x1ec>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a3f      	ldr	r2, [pc, #252]	; (8001608 <HAL_GPIO_Init+0x2c4>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d00d      	beq.n	800152c <HAL_GPIO_Init+0x1e8>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a3e      	ldr	r2, [pc, #248]	; (800160c <HAL_GPIO_Init+0x2c8>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d007      	beq.n	8001528 <HAL_GPIO_Init+0x1e4>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a3d      	ldr	r2, [pc, #244]	; (8001610 <HAL_GPIO_Init+0x2cc>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d101      	bne.n	8001524 <HAL_GPIO_Init+0x1e0>
 8001520:	2303      	movs	r3, #3
 8001522:	e006      	b.n	8001532 <HAL_GPIO_Init+0x1ee>
 8001524:	2304      	movs	r3, #4
 8001526:	e004      	b.n	8001532 <HAL_GPIO_Init+0x1ee>
 8001528:	2302      	movs	r3, #2
 800152a:	e002      	b.n	8001532 <HAL_GPIO_Init+0x1ee>
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <HAL_GPIO_Init+0x1ee>
 8001530:	2300      	movs	r3, #0
 8001532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001534:	f002 0203 	and.w	r2, r2, #3
 8001538:	0092      	lsls	r2, r2, #2
 800153a:	4093      	lsls	r3, r2
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	4313      	orrs	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001542:	492f      	ldr	r1, [pc, #188]	; (8001600 <HAL_GPIO_Init+0x2bc>)
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	3302      	adds	r3, #2
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d006      	beq.n	800156a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800155c:	4b2d      	ldr	r3, [pc, #180]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	492c      	ldr	r1, [pc, #176]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	608b      	str	r3, [r1, #8]
 8001568:	e006      	b.n	8001578 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800156a:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	43db      	mvns	r3, r3
 8001572:	4928      	ldr	r1, [pc, #160]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 8001574:	4013      	ands	r3, r2
 8001576:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d006      	beq.n	8001592 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001584:	4b23      	ldr	r3, [pc, #140]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	4922      	ldr	r1, [pc, #136]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	60cb      	str	r3, [r1, #12]
 8001590:	e006      	b.n	80015a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001592:	4b20      	ldr	r3, [pc, #128]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	43db      	mvns	r3, r3
 800159a:	491e      	ldr	r1, [pc, #120]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 800159c:	4013      	ands	r3, r2
 800159e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d006      	beq.n	80015ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	4918      	ldr	r1, [pc, #96]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
 80015b8:	e006      	b.n	80015c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	4914      	ldr	r1, [pc, #80]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d021      	beq.n	8001618 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	490e      	ldr	r1, [pc, #56]	; (8001614 <HAL_GPIO_Init+0x2d0>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	600b      	str	r3, [r1, #0]
 80015e0:	e021      	b.n	8001626 <HAL_GPIO_Init+0x2e2>
 80015e2:	bf00      	nop
 80015e4:	10320000 	.word	0x10320000
 80015e8:	10310000 	.word	0x10310000
 80015ec:	10220000 	.word	0x10220000
 80015f0:	10210000 	.word	0x10210000
 80015f4:	10120000 	.word	0x10120000
 80015f8:	10110000 	.word	0x10110000
 80015fc:	40021000 	.word	0x40021000
 8001600:	40010000 	.word	0x40010000
 8001604:	40010800 	.word	0x40010800
 8001608:	40010c00 	.word	0x40010c00
 800160c:	40011000 	.word	0x40011000
 8001610:	40011400 	.word	0x40011400
 8001614:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_GPIO_Init+0x304>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	43db      	mvns	r3, r3
 8001620:	4909      	ldr	r1, [pc, #36]	; (8001648 <HAL_GPIO_Init+0x304>)
 8001622:	4013      	ands	r3, r2
 8001624:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	3301      	adds	r3, #1
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	fa22 f303 	lsr.w	r3, r2, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	f47f ae8e 	bne.w	8001358 <HAL_GPIO_Init+0x14>
  }
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	372c      	adds	r7, #44	; 0x2c
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	40010400 	.word	0x40010400

0800164c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
 8001658:	4613      	mov	r3, r2
 800165a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001668:	e003      	b.n	8001672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800166a:	887b      	ldrh	r3, [r7, #2]
 800166c:	041a      	lsls	r2, r3, #16
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	611a      	str	r2, [r3, #16]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr

0800167c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001688:	695a      	ldr	r2, [r3, #20]
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	4013      	ands	r3, r2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d006      	beq.n	80016a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fe0c 	bl	80002b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40010400 	.word	0x40010400

080016ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e272      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 8087 	beq.w	80017da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016cc:	4b92      	ldr	r3, [pc, #584]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 030c 	and.w	r3, r3, #12
 80016d4:	2b04      	cmp	r3, #4
 80016d6:	d00c      	beq.n	80016f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016d8:	4b8f      	ldr	r3, [pc, #572]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 030c 	and.w	r3, r3, #12
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d112      	bne.n	800170a <HAL_RCC_OscConfig+0x5e>
 80016e4:	4b8c      	ldr	r3, [pc, #560]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f0:	d10b      	bne.n	800170a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f2:	4b89      	ldr	r3, [pc, #548]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d06c      	beq.n	80017d8 <HAL_RCC_OscConfig+0x12c>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d168      	bne.n	80017d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e24c      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001712:	d106      	bne.n	8001722 <HAL_RCC_OscConfig+0x76>
 8001714:	4b80      	ldr	r3, [pc, #512]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a7f      	ldr	r2, [pc, #508]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 800171a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	e02e      	b.n	8001780 <HAL_RCC_OscConfig+0xd4>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10c      	bne.n	8001744 <HAL_RCC_OscConfig+0x98>
 800172a:	4b7b      	ldr	r3, [pc, #492]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a7a      	ldr	r2, [pc, #488]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 8001730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	4b78      	ldr	r3, [pc, #480]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a77      	ldr	r2, [pc, #476]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 800173c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	e01d      	b.n	8001780 <HAL_RCC_OscConfig+0xd4>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0xbc>
 800174e:	4b72      	ldr	r3, [pc, #456]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a71      	ldr	r2, [pc, #452]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 8001754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4b6f      	ldr	r3, [pc, #444]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a6e      	ldr	r2, [pc, #440]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 8001760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e00b      	b.n	8001780 <HAL_RCC_OscConfig+0xd4>
 8001768:	4b6b      	ldr	r3, [pc, #428]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a6a      	ldr	r2, [pc, #424]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 800176e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	4b68      	ldr	r3, [pc, #416]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a67      	ldr	r2, [pc, #412]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 800177a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d013      	beq.n	80017b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fcc4 	bl	8001114 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff fcc0 	bl	8001114 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	; 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e200      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a2:	4b5d      	ldr	r3, [pc, #372]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0xe4>
 80017ae:	e014      	b.n	80017da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fcb0 	bl	8001114 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b8:	f7ff fcac 	bl	8001114 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b64      	cmp	r3, #100	; 0x64
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e1ec      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ca:	4b53      	ldr	r3, [pc, #332]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x10c>
 80017d6:	e000      	b.n	80017da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d063      	beq.n	80018ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017e6:	4b4c      	ldr	r3, [pc, #304]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 030c 	and.w	r3, r3, #12
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00b      	beq.n	800180a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017f2:	4b49      	ldr	r3, [pc, #292]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 030c 	and.w	r3, r3, #12
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d11c      	bne.n	8001838 <HAL_RCC_OscConfig+0x18c>
 80017fe:	4b46      	ldr	r3, [pc, #280]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d116      	bne.n	8001838 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180a:	4b43      	ldr	r3, [pc, #268]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d005      	beq.n	8001822 <HAL_RCC_OscConfig+0x176>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d001      	beq.n	8001822 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e1c0      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001822:	4b3d      	ldr	r3, [pc, #244]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	4939      	ldr	r1, [pc, #228]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001836:	e03a      	b.n	80018ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d020      	beq.n	8001882 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001840:	4b36      	ldr	r3, [pc, #216]	; (800191c <HAL_RCC_OscConfig+0x270>)
 8001842:	2201      	movs	r2, #1
 8001844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001846:	f7ff fc65 	bl	8001114 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800184e:	f7ff fc61 	bl	8001114 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e1a1      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001860:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186c:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4927      	ldr	r1, [pc, #156]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 800187c:	4313      	orrs	r3, r2
 800187e:	600b      	str	r3, [r1, #0]
 8001880:	e015      	b.n	80018ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001882:	4b26      	ldr	r3, [pc, #152]	; (800191c <HAL_RCC_OscConfig+0x270>)
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001888:	f7ff fc44 	bl	8001114 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001890:	f7ff fc40 	bl	8001114 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e180      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a2:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d03a      	beq.n	8001930 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d019      	beq.n	80018f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018c2:	4b17      	ldr	r3, [pc, #92]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c8:	f7ff fc24 	bl	8001114 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d0:	f7ff fc20 	bl	8001114 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e160      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018ee:	2001      	movs	r0, #1
 80018f0:	f000 fa9c 	bl	8001e2c <RCC_Delay>
 80018f4:	e01c      	b.n	8001930 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fc:	f7ff fc0a 	bl	8001114 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001902:	e00f      	b.n	8001924 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001904:	f7ff fc06 	bl	8001114 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d908      	bls.n	8001924 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e146      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	42420000 	.word	0x42420000
 8001920:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001924:	4b92      	ldr	r3, [pc, #584]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1e9      	bne.n	8001904 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 80a6 	beq.w	8001a8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800193e:	2300      	movs	r3, #0
 8001940:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001942:	4b8b      	ldr	r3, [pc, #556]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10d      	bne.n	800196a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800194e:	4b88      	ldr	r3, [pc, #544]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	4a87      	ldr	r2, [pc, #540]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001958:	61d3      	str	r3, [r2, #28]
 800195a:	4b85      	ldr	r3, [pc, #532]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001966:	2301      	movs	r3, #1
 8001968:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196a:	4b82      	ldr	r3, [pc, #520]	; (8001b74 <HAL_RCC_OscConfig+0x4c8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001972:	2b00      	cmp	r3, #0
 8001974:	d118      	bne.n	80019a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001976:	4b7f      	ldr	r3, [pc, #508]	; (8001b74 <HAL_RCC_OscConfig+0x4c8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a7e      	ldr	r2, [pc, #504]	; (8001b74 <HAL_RCC_OscConfig+0x4c8>)
 800197c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001982:	f7ff fbc7 	bl	8001114 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800198a:	f7ff fbc3 	bl	8001114 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b64      	cmp	r3, #100	; 0x64
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e103      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199c:	4b75      	ldr	r3, [pc, #468]	; (8001b74 <HAL_RCC_OscConfig+0x4c8>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0f0      	beq.n	800198a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d106      	bne.n	80019be <HAL_RCC_OscConfig+0x312>
 80019b0:	4b6f      	ldr	r3, [pc, #444]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	4a6e      	ldr	r2, [pc, #440]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	6213      	str	r3, [r2, #32]
 80019bc:	e02d      	b.n	8001a1a <HAL_RCC_OscConfig+0x36e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10c      	bne.n	80019e0 <HAL_RCC_OscConfig+0x334>
 80019c6:	4b6a      	ldr	r3, [pc, #424]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	4a69      	ldr	r2, [pc, #420]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	f023 0301 	bic.w	r3, r3, #1
 80019d0:	6213      	str	r3, [r2, #32]
 80019d2:	4b67      	ldr	r3, [pc, #412]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	4a66      	ldr	r2, [pc, #408]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	f023 0304 	bic.w	r3, r3, #4
 80019dc:	6213      	str	r3, [r2, #32]
 80019de:	e01c      	b.n	8001a1a <HAL_RCC_OscConfig+0x36e>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2b05      	cmp	r3, #5
 80019e6:	d10c      	bne.n	8001a02 <HAL_RCC_OscConfig+0x356>
 80019e8:	4b61      	ldr	r3, [pc, #388]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	4a60      	ldr	r2, [pc, #384]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 80019ee:	f043 0304 	orr.w	r3, r3, #4
 80019f2:	6213      	str	r3, [r2, #32]
 80019f4:	4b5e      	ldr	r3, [pc, #376]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	4a5d      	ldr	r2, [pc, #372]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6213      	str	r3, [r2, #32]
 8001a00:	e00b      	b.n	8001a1a <HAL_RCC_OscConfig+0x36e>
 8001a02:	4b5b      	ldr	r3, [pc, #364]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	4a5a      	ldr	r2, [pc, #360]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	f023 0301 	bic.w	r3, r3, #1
 8001a0c:	6213      	str	r3, [r2, #32]
 8001a0e:	4b58      	ldr	r3, [pc, #352]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	4a57      	ldr	r2, [pc, #348]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	f023 0304 	bic.w	r3, r3, #4
 8001a18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d015      	beq.n	8001a4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a22:	f7ff fb77 	bl	8001114 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a28:	e00a      	b.n	8001a40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2a:	f7ff fb73 	bl	8001114 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e0b1      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a40:	4b4b      	ldr	r3, [pc, #300]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0ee      	beq.n	8001a2a <HAL_RCC_OscConfig+0x37e>
 8001a4c:	e014      	b.n	8001a78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4e:	f7ff fb61 	bl	8001114 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a54:	e00a      	b.n	8001a6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a56:	f7ff fb5d 	bl	8001114 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e09b      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a6c:	4b40      	ldr	r3, [pc, #256]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1ee      	bne.n	8001a56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a78:	7dfb      	ldrb	r3, [r7, #23]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d105      	bne.n	8001a8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a7e:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	4a3b      	ldr	r2, [pc, #236]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 8087 	beq.w	8001ba2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a94:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d061      	beq.n	8001b64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d146      	bne.n	8001b36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa8:	4b33      	ldr	r3, [pc, #204]	; (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aae:	f7ff fb31 	bl	8001114 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab6:	f7ff fb2d 	bl	8001114 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e06d      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac8:	4b29      	ldr	r3, [pc, #164]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1f0      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001adc:	d108      	bne.n	8001af0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ade:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	4921      	ldr	r1, [pc, #132]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af0:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a19      	ldr	r1, [r3, #32]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	430b      	orrs	r3, r1
 8001b02:	491b      	ldr	r1, [pc, #108]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b08:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0e:	f7ff fb01 	bl	8001114 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b16:	f7ff fafd 	bl	8001114 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e03d      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0f0      	beq.n	8001b16 <HAL_RCC_OscConfig+0x46a>
 8001b34:	e035      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff faea 	bl	8001114 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b44:	f7ff fae6 	bl	8001114 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e026      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x498>
 8001b62:	e01e      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d107      	bne.n	8001b7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e019      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40007000 	.word	0x40007000
 8001b78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_RCC_OscConfig+0x500>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d106      	bne.n	8001b9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d001      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40021000 	.word	0x40021000

08001bb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0d0      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc4:	4b6a      	ldr	r3, [pc, #424]	; (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d910      	bls.n	8001bf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	4b67      	ldr	r3, [pc, #412]	; (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 0207 	bic.w	r2, r3, #7
 8001bda:	4965      	ldr	r1, [pc, #404]	; (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be2:	4b63      	ldr	r3, [pc, #396]	; (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e0b8      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d020      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c0c:	4b59      	ldr	r3, [pc, #356]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	4a58      	ldr	r2, [pc, #352]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0308 	and.w	r3, r3, #8
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c24:	4b53      	ldr	r3, [pc, #332]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	4a52      	ldr	r2, [pc, #328]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c30:	4b50      	ldr	r3, [pc, #320]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	494d      	ldr	r1, [pc, #308]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d040      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d107      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c56:	4b47      	ldr	r3, [pc, #284]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d115      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e07f      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d107      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6e:	4b41      	ldr	r3, [pc, #260]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d109      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e073      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7e:	4b3d      	ldr	r3, [pc, #244]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e06b      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c8e:	4b39      	ldr	r3, [pc, #228]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f023 0203 	bic.w	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	4936      	ldr	r1, [pc, #216]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca0:	f7ff fa38 	bl	8001114 <HAL_GetTick>
 8001ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca6:	e00a      	b.n	8001cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca8:	f7ff fa34 	bl	8001114 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e053      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cbe:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 020c 	and.w	r2, r3, #12
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d1eb      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd0:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d210      	bcs.n	8001d00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cde:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 0207 	bic.w	r2, r3, #7
 8001ce6:	4922      	ldr	r1, [pc, #136]	; (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d001      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e032      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d008      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	4916      	ldr	r1, [pc, #88]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d009      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d2a:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	490e      	ldr	r1, [pc, #56]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d3e:	f000 f821 	bl	8001d84 <HAL_RCC_GetSysClockFreq>
 8001d42:	4602      	mov	r2, r0
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	091b      	lsrs	r3, r3, #4
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	490a      	ldr	r1, [pc, #40]	; (8001d78 <HAL_RCC_ClockConfig+0x1c8>)
 8001d50:	5ccb      	ldrb	r3, [r1, r3]
 8001d52:	fa22 f303 	lsr.w	r3, r2, r3
 8001d56:	4a09      	ldr	r2, [pc, #36]	; (8001d7c <HAL_RCC_ClockConfig+0x1cc>)
 8001d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_RCC_ClockConfig+0x1d0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff f996 	bl	8001090 <HAL_InitTick>

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40022000 	.word	0x40022000
 8001d74:	40021000 	.word	0x40021000
 8001d78:	08002730 	.word	0x08002730
 8001d7c:	20000004 	.word	0x20000004
 8001d80:	20000008 	.word	0x20000008

08001d84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b087      	sub	sp, #28
 8001d88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	2300      	movs	r3, #0
 8001d98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d9e:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d002      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0x30>
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d003      	beq.n	8001dba <HAL_RCC_GetSysClockFreq+0x36>
 8001db2:	e027      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001db6:	613b      	str	r3, [r7, #16]
      break;
 8001db8:	e027      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	0c9b      	lsrs	r3, r3, #18
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	4a17      	ldr	r2, [pc, #92]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dc4:	5cd3      	ldrb	r3, [r2, r3]
 8001dc6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d010      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dd2:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	0c5b      	lsrs	r3, r3, #17
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	4a11      	ldr	r2, [pc, #68]	; (8001e24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dde:	5cd3      	ldrb	r3, [r2, r3]
 8001de0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a0d      	ldr	r2, [pc, #52]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001de6:	fb03 f202 	mul.w	r2, r3, r2
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	e004      	b.n	8001dfe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a0c      	ldr	r2, [pc, #48]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001df8:	fb02 f303 	mul.w	r3, r2, r3
 8001dfc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	613b      	str	r3, [r7, #16]
      break;
 8001e02:	e002      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e06:	613b      	str	r3, [r7, #16]
      break;
 8001e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e0a:	693b      	ldr	r3, [r7, #16]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	371c      	adds	r7, #28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	007a1200 	.word	0x007a1200
 8001e20:	08002740 	.word	0x08002740
 8001e24:	08002750 	.word	0x08002750
 8001e28:	003d0900 	.word	0x003d0900

08001e2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e34:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <RCC_Delay+0x34>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a0a      	ldr	r2, [pc, #40]	; (8001e64 <RCC_Delay+0x38>)
 8001e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3e:	0a5b      	lsrs	r3, r3, #9
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	fb02 f303 	mul.w	r3, r2, r3
 8001e46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e48:	bf00      	nop
  }
  while (Delay --);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1e5a      	subs	r2, r3, #1
 8001e4e:	60fa      	str	r2, [r7, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f9      	bne.n	8001e48 <RCC_Delay+0x1c>
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	20000004 	.word	0x20000004
 8001e64:	10624dd3 	.word	0x10624dd3

08001e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e041      	b.n	8001efe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d106      	bne.n	8001e94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff f834 	bl	8000efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	f000 faa2 	bl	80023f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d001      	beq.n	8001f20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e03a      	b.n	8001f96 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0201 	orr.w	r2, r2, #1
 8001f36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a18      	ldr	r2, [pc, #96]	; (8001fa0 <HAL_TIM_Base_Start_IT+0x98>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00e      	beq.n	8001f60 <HAL_TIM_Base_Start_IT+0x58>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f4a:	d009      	beq.n	8001f60 <HAL_TIM_Base_Start_IT+0x58>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a14      	ldr	r2, [pc, #80]	; (8001fa4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d004      	beq.n	8001f60 <HAL_TIM_Base_Start_IT+0x58>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a13      	ldr	r2, [pc, #76]	; (8001fa8 <HAL_TIM_Base_Start_IT+0xa0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d111      	bne.n	8001f84 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d010      	beq.n	8001f94 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0201 	orr.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f82:	e007      	b.n	8001f94 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	40012c00 	.word	0x40012c00
 8001fa4:	40000400 	.word	0x40000400
 8001fa8:	40000800 	.word	0x40000800

08001fac <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0201 	bic.w	r2, r2, #1
 8001fc2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6a1a      	ldr	r2, [r3, #32]
 8001fca:	f241 1311 	movw	r3, #4369	; 0x1111
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10f      	bne.n	8001ff4 <HAL_TIM_Base_Stop_IT+0x48>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6a1a      	ldr	r2, [r3, #32]
 8001fda:	f240 4344 	movw	r3, #1092	; 0x444
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d107      	bne.n	8001ff4 <HAL_TIM_Base_Stop_IT+0x48>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b02      	cmp	r3, #2
 800201c:	d122      	bne.n	8002064 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b02      	cmp	r3, #2
 800202a:	d11b      	bne.n	8002064 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0202 	mvn.w	r2, #2
 8002034:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f9b4 	bl	80023b8 <HAL_TIM_IC_CaptureCallback>
 8002050:	e005      	b.n	800205e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f9a7 	bl	80023a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f9b6 	bl	80023ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	2b04      	cmp	r3, #4
 8002070:	d122      	bne.n	80020b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b04      	cmp	r3, #4
 800207e:	d11b      	bne.n	80020b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0204 	mvn.w	r2, #4
 8002088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2202      	movs	r2, #2
 800208e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f98a 	bl	80023b8 <HAL_TIM_IC_CaptureCallback>
 80020a4:	e005      	b.n	80020b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f97d 	bl	80023a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f98c 	bl	80023ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d122      	bne.n	800210c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d11b      	bne.n	800210c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0208 	mvn.w	r2, #8
 80020dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2204      	movs	r2, #4
 80020e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f960 	bl	80023b8 <HAL_TIM_IC_CaptureCallback>
 80020f8:	e005      	b.n	8002106 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f953 	bl	80023a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f962 	bl	80023ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	2b10      	cmp	r3, #16
 8002118:	d122      	bne.n	8002160 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	2b10      	cmp	r3, #16
 8002126:	d11b      	bne.n	8002160 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0210 	mvn.w	r2, #16
 8002130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2208      	movs	r2, #8
 8002136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f936 	bl	80023b8 <HAL_TIM_IC_CaptureCallback>
 800214c:	e005      	b.n	800215a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f929 	bl	80023a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f938 	bl	80023ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b01      	cmp	r3, #1
 800216c:	d10e      	bne.n	800218c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b01      	cmp	r3, #1
 800217a:	d107      	bne.n	800218c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0201 	mvn.w	r2, #1
 8002184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fd ffe0 	bl	800014c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002196:	2b80      	cmp	r3, #128	; 0x80
 8002198:	d10e      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a4:	2b80      	cmp	r3, #128	; 0x80
 80021a6:	d107      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 fa7b 	bl	80026ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c2:	2b40      	cmp	r3, #64	; 0x40
 80021c4:	d10e      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d0:	2b40      	cmp	r3, #64	; 0x40
 80021d2:	d107      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f8fc 	bl	80023dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f003 0320 	and.w	r3, r3, #32
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	d10e      	bne.n	8002210 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0320 	and.w	r3, r3, #32
 80021fc:	2b20      	cmp	r3, #32
 80021fe:	d107      	bne.n	8002210 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0220 	mvn.w	r2, #32
 8002208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 fa46 	bl	800269c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_TIM_ConfigClockSource+0x1c>
 8002230:	2302      	movs	r3, #2
 8002232:	e0b4      	b.n	800239e <HAL_TIM_ConfigClockSource+0x186>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800225a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800226c:	d03e      	beq.n	80022ec <HAL_TIM_ConfigClockSource+0xd4>
 800226e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002272:	f200 8087 	bhi.w	8002384 <HAL_TIM_ConfigClockSource+0x16c>
 8002276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800227a:	f000 8086 	beq.w	800238a <HAL_TIM_ConfigClockSource+0x172>
 800227e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002282:	d87f      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x16c>
 8002284:	2b70      	cmp	r3, #112	; 0x70
 8002286:	d01a      	beq.n	80022be <HAL_TIM_ConfigClockSource+0xa6>
 8002288:	2b70      	cmp	r3, #112	; 0x70
 800228a:	d87b      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x16c>
 800228c:	2b60      	cmp	r3, #96	; 0x60
 800228e:	d050      	beq.n	8002332 <HAL_TIM_ConfigClockSource+0x11a>
 8002290:	2b60      	cmp	r3, #96	; 0x60
 8002292:	d877      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x16c>
 8002294:	2b50      	cmp	r3, #80	; 0x50
 8002296:	d03c      	beq.n	8002312 <HAL_TIM_ConfigClockSource+0xfa>
 8002298:	2b50      	cmp	r3, #80	; 0x50
 800229a:	d873      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x16c>
 800229c:	2b40      	cmp	r3, #64	; 0x40
 800229e:	d058      	beq.n	8002352 <HAL_TIM_ConfigClockSource+0x13a>
 80022a0:	2b40      	cmp	r3, #64	; 0x40
 80022a2:	d86f      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x16c>
 80022a4:	2b30      	cmp	r3, #48	; 0x30
 80022a6:	d064      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x15a>
 80022a8:	2b30      	cmp	r3, #48	; 0x30
 80022aa:	d86b      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x16c>
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	d060      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x15a>
 80022b0:	2b20      	cmp	r3, #32
 80022b2:	d867      	bhi.n	8002384 <HAL_TIM_ConfigClockSource+0x16c>
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d05c      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x15a>
 80022b8:	2b10      	cmp	r3, #16
 80022ba:	d05a      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x15a>
 80022bc:	e062      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022ce:	f000 f968 	bl	80025a2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80022e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	609a      	str	r2, [r3, #8]
      break;
 80022ea:	e04f      	b.n	800238c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022fc:	f000 f951 	bl	80025a2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800230e:	609a      	str	r2, [r3, #8]
      break;
 8002310:	e03c      	b.n	800238c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800231e:	461a      	mov	r2, r3
 8002320:	f000 f8c8 	bl	80024b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2150      	movs	r1, #80	; 0x50
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f91f 	bl	800256e <TIM_ITRx_SetConfig>
      break;
 8002330:	e02c      	b.n	800238c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800233e:	461a      	mov	r2, r3
 8002340:	f000 f8e6 	bl	8002510 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2160      	movs	r1, #96	; 0x60
 800234a:	4618      	mov	r0, r3
 800234c:	f000 f90f 	bl	800256e <TIM_ITRx_SetConfig>
      break;
 8002350:	e01c      	b.n	800238c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800235e:	461a      	mov	r2, r3
 8002360:	f000 f8a8 	bl	80024b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2140      	movs	r1, #64	; 0x40
 800236a:	4618      	mov	r0, r3
 800236c:	f000 f8ff 	bl	800256e <TIM_ITRx_SetConfig>
      break;
 8002370:	e00c      	b.n	800238c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4619      	mov	r1, r3
 800237c:	4610      	mov	r0, r2
 800237e:	f000 f8f6 	bl	800256e <TIM_ITRx_SetConfig>
      break;
 8002382:	e003      	b.n	800238c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
      break;
 8002388:	e000      	b.n	800238c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800238a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800239c:	7bfb      	ldrb	r3, [r7, #15]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr

080023b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr
	...

080023f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a29      	ldr	r2, [pc, #164]	; (80024a8 <TIM_Base_SetConfig+0xb8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d00b      	beq.n	8002420 <TIM_Base_SetConfig+0x30>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240e:	d007      	beq.n	8002420 <TIM_Base_SetConfig+0x30>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a26      	ldr	r2, [pc, #152]	; (80024ac <TIM_Base_SetConfig+0xbc>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d003      	beq.n	8002420 <TIM_Base_SetConfig+0x30>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a25      	ldr	r2, [pc, #148]	; (80024b0 <TIM_Base_SetConfig+0xc0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d108      	bne.n	8002432 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <TIM_Base_SetConfig+0xb8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d00b      	beq.n	8002452 <TIM_Base_SetConfig+0x62>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002440:	d007      	beq.n	8002452 <TIM_Base_SetConfig+0x62>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a19      	ldr	r2, [pc, #100]	; (80024ac <TIM_Base_SetConfig+0xbc>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d003      	beq.n	8002452 <TIM_Base_SetConfig+0x62>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a18      	ldr	r2, [pc, #96]	; (80024b0 <TIM_Base_SetConfig+0xc0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d108      	bne.n	8002464 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	4313      	orrs	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	4313      	orrs	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a07      	ldr	r2, [pc, #28]	; (80024a8 <TIM_Base_SetConfig+0xb8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d103      	bne.n	8002498 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	691a      	ldr	r2, [r3, #16]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	615a      	str	r2, [r3, #20]
}
 800249e:	bf00      	nop
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr
 80024a8:	40012c00 	.word	0x40012c00
 80024ac:	40000400 	.word	0x40000400
 80024b0:	40000800 	.word	0x40000800

080024b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	f023 0201 	bic.w	r2, r3, #1
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f023 030a 	bic.w	r3, r3, #10
 80024f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	621a      	str	r2, [r3, #32]
}
 8002506:	bf00      	nop
 8002508:	371c      	adds	r7, #28
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	f023 0210 	bic.w	r2, r3, #16
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800253a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	031b      	lsls	r3, r3, #12
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800254c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	621a      	str	r2, [r3, #32]
}
 8002564:	bf00      	nop
 8002566:	371c      	adds	r7, #28
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr

0800256e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800256e:	b480      	push	{r7}
 8002570:	b085      	sub	sp, #20
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002584:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4313      	orrs	r3, r2
 800258c:	f043 0307 	orr.w	r3, r3, #7
 8002590:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	609a      	str	r2, [r3, #8]
}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr

080025a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b087      	sub	sp, #28
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	021a      	lsls	r2, r3, #8
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	609a      	str	r2, [r3, #8]
}
 80025d6:	bf00      	nop
 80025d8:	371c      	adds	r7, #28
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d101      	bne.n	80025f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e046      	b.n	8002686 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800261e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	4313      	orrs	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a16      	ldr	r2, [pc, #88]	; (8002690 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d00e      	beq.n	800265a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002644:	d009      	beq.n	800265a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a12      	ldr	r2, [pc, #72]	; (8002694 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d004      	beq.n	800265a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a10      	ldr	r2, [pc, #64]	; (8002698 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d10c      	bne.n	8002674 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002660:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	4313      	orrs	r3, r2
 800266a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	40012c00 	.word	0x40012c00
 8002694:	40000400 	.word	0x40000400
 8002698:	40000800 	.word	0x40000800

0800269c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr

080026ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <memset>:
 80026c0:	4603      	mov	r3, r0
 80026c2:	4402      	add	r2, r0
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d100      	bne.n	80026ca <memset+0xa>
 80026c8:	4770      	bx	lr
 80026ca:	f803 1b01 	strb.w	r1, [r3], #1
 80026ce:	e7f9      	b.n	80026c4 <memset+0x4>

080026d0 <__libc_init_array>:
 80026d0:	b570      	push	{r4, r5, r6, lr}
 80026d2:	2600      	movs	r6, #0
 80026d4:	4d0c      	ldr	r5, [pc, #48]	; (8002708 <__libc_init_array+0x38>)
 80026d6:	4c0d      	ldr	r4, [pc, #52]	; (800270c <__libc_init_array+0x3c>)
 80026d8:	1b64      	subs	r4, r4, r5
 80026da:	10a4      	asrs	r4, r4, #2
 80026dc:	42a6      	cmp	r6, r4
 80026de:	d109      	bne.n	80026f4 <__libc_init_array+0x24>
 80026e0:	f000 f81a 	bl	8002718 <_init>
 80026e4:	2600      	movs	r6, #0
 80026e6:	4d0a      	ldr	r5, [pc, #40]	; (8002710 <__libc_init_array+0x40>)
 80026e8:	4c0a      	ldr	r4, [pc, #40]	; (8002714 <__libc_init_array+0x44>)
 80026ea:	1b64      	subs	r4, r4, r5
 80026ec:	10a4      	asrs	r4, r4, #2
 80026ee:	42a6      	cmp	r6, r4
 80026f0:	d105      	bne.n	80026fe <__libc_init_array+0x2e>
 80026f2:	bd70      	pop	{r4, r5, r6, pc}
 80026f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f8:	4798      	blx	r3
 80026fa:	3601      	adds	r6, #1
 80026fc:	e7ee      	b.n	80026dc <__libc_init_array+0xc>
 80026fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002702:	4798      	blx	r3
 8002704:	3601      	adds	r6, #1
 8002706:	e7f2      	b.n	80026ee <__libc_init_array+0x1e>
 8002708:	08002754 	.word	0x08002754
 800270c:	08002754 	.word	0x08002754
 8002710:	08002754 	.word	0x08002754
 8002714:	08002758 	.word	0x08002758

08002718 <_init>:
 8002718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271a:	bf00      	nop
 800271c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271e:	bc08      	pop	{r3}
 8002720:	469e      	mov	lr, r3
 8002722:	4770      	bx	lr

08002724 <_fini>:
 8002724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002726:	bf00      	nop
 8002728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800272a:	bc08      	pop	{r3}
 800272c:	469e      	mov	lr, r3
 800272e:	4770      	bx	lr
